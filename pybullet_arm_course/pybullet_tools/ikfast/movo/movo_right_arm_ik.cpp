/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-08-20 11:32:33.505301
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

//// START
//// Make sure the version number matches.
//// You might need to install the dev version to get the header files.
//// sudo apt-get install python3.4-dev
#include "Python.h"
//// END

#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[2]);
x1=IKsin(j[4]);
x2=IKcos(j[3]);
x3=IKcos(j[4]);
x4=IKsin(j[2]);
x5=IKsin(j[5]);
x6=IKcos(j[5]);
x7=IKsin(j[3]);
x8=IKsin(j[6]);
x9=IKcos(j[6]);
x10=IKsin(j[7]);
x11=IKcos(j[7]);
x12=IKcos(j[1]);
x13=IKsin(j[1]);
x14=((0.31105)*x2);
x15=((0.26375)*x6);
x16=((1.0)*x7);
x17=((1.0)*x0);
x18=((1.0)*x12);
x19=((0.26375)*x5);
x20=((1.0)*x13);
x21=((0.41)*x4);
x22=((1.0)*x8);
x23=((0.26375)*x1);
x24=((1.0)*x9);
x25=((1.0)*x2);
x26=((0.31105)*x13);
x27=(x12*x7);
x28=(x1*x4);
x29=(x3*x4);
x30=(x0*x13);
x31=(x4*x7);
x32=(x12*x2);
x33=(x0*x3);
x34=(x1*x17);
x35=(x13*x16);
x36=((((-1.0)*x35))+((x0*x32)));
x37=(((x2*x30))+x27);
x38=((((-1.0)*x25*x29))+x34);
x39=((((-1.0)*x17*x32))+x35);
x40=((((-1.0)*x18*x2))+((x16*x30)));
x41=(((x17*x3))+((x25*x28)));
x42=((-1.0)*x41);
x43=(((x2*x20))+((x0*x12*x16)));
x44=((((-1.0)*x12*x16))+(((-1.0)*x13*x17*x2)));
x45=(x3*x36);
x46=(x3*x37);
x47=(x40*x5);
x48=(x43*x5);
x49=(x1*x44);
x50=(x42*x8);
x51=(((x31*x5))+((x38*x6)));
x52=(((x12*x29))+((x1*x39)));
x53=((((-1.0)*x16*x4*x6))+((x5*(((((-1.0)*x2*x29))+(((1.0)*x34)))))));
x54=((((-1.0)*x45))+(((-1.0)*x18*x28)));
x55=(x49+((x13*x29)));
x56=((((-1.0)*x46))+(((-1.0)*x20*x28)));
x57=(x52*x8);
x58=(x51*x9);
x59=(x54*x6);
x60=(((x43*x6))+((x5*((x45+((x12*x28)))))));
x61=(((x56*x6))+x47);
x62=(((x5*(((((-1.0)*x46))+(((-1.0)*x13*x28))))))+(((-1.0)*x40*x6)));
eerot[0]=(((x51*x8))+((x41*x9)));
eerot[1]=(((x11*x53))+((x10*((x58+x50)))));
eerot[2]=(((x10*x53))+((x11*(((((-1.0)*x22*x42))+(((-1.0)*x24*x51)))))));
eetrans[0]=((0.2844948)+((x9*(((((0.26375)*x33))+((x2*x23*x4))))))+(((0.41)*x0))+((x14*x28))+(((-0.0114)*x31))+(((0.31105)*x33))+((x8*((((x19*x31))+((x15*x38)))))));
eerot[3]=(((x8*(((((-1.0)*x48))+(((-1.0)*x59))))))+((x52*x9)));
eerot[4]=(((x11*x60))+(((-1.0)*x10*(((((1.0)*x57))+(((1.0)*x9*((((x6*(((((-1.0)*x45))+(((-1.0)*x12*x28))))))+x48)))))))));
eerot[5]=(((x10*x60))+((x11*((((x9*((x48+x59))))+x57)))));
IkReal x63=(x12*x29);
eetrans[1]=((-0.13335)+((x1*((((x26*x7))+(((-1.0)*x0*x12*x14))))))+(((0.0114)*x13*x2))+(((0.0114)*x0*x27))+((x12*x21))+(((0.31105)*x63))+((x8*(((((-1.0)*x19*x43))+(((-1.0)*x15*x54))))))+((x9*((((x23*x39))+(((0.26375)*x63)))))));
eerot[6]=(((x9*(((((-1.0)*x49))+(((-1.0)*x20*x29))))))+((x61*x8)));
eerot[7]=(((x11*x62))+((x10*((((x55*x8))+((x61*x9)))))));
eerot[8]=(((x10*x62))+((x11*(((((-1.0)*x24*x61))+(((-1.0)*x22*x55)))))));
eetrans[2]=((0.75007)+(((0.0114)*x32))+((x8*((((x19*x40))+((x15*x56))))))+(((-1.0)*x13*x21))+((x9*(((((-0.26375)*x13*x29))+(((-1.0)*x23*x44))))))+(((-0.0114)*x30*x7))+j[0]+((x1*(((((0.31105)*x27))+((x14*x30))))))+(((-1.0)*x26*x29)));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 8; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,j0,cj0,sj0,htj0,j13,cj13,sj13,htj13,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij11[2], _nj11,_ij12[2], _nj12,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij0[2], _nj0,_ij13[2], _nj13;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij13[0] = -1; _ij13[1] = -1; _nj13 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j13=pfree[1]; cj13=cos(pfree[1]); sj13=sin(pfree[1]), htj13=tan(pfree[1]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r12;
new_r01=r11;
new_r02=((-1.0)*r10);
new_px=((0.13335)+(((-0.26375)*r10))+py);
new_r10=((-1.0)*r22);
new_r11=((-1.0)*r21);
new_r12=r20;
new_py=((0.75007)+(((-1.0)*pz))+(((0.26375)*r20))+j0);
new_r20=((-1.0)*r02);
new_r21=((-1.0)*r01);
new_r22=r00;
new_pz=((0.1657448)+(((0.26375)*r00))+(((-1.0)*px)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x64=((1.0)*px);
IkReal x65=((1.0)*pz);
IkReal x66=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x66))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x65)));
rxp0_2=((((-1.0)*r10*x64))+((py*r00)));
rxp1_0=((((-1.0)*r21*x66))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x65)));
rxp1_2=((((-1.0)*r11*x64))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x66)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x65)));
rxp2_2=((((-1.0)*r12*x64))+((py*r02)));
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
cj14array[0]=((-0.98360980314513)+(((3.92063075107523)*pp))+(((0.931149803380368)*pz)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IkReal j11eval[2];
j11eval[0]=((px*px)+(py*py));
j11eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x67=(cj13*sj14);
j12eval[0]=((IKabs(((-0.41)+(((-0.31105)*cj14)))))+(IKabs(((((0.0114)*sj13))+(((-0.31105)*x67))))));
j12eval[1]=((1293.47491535857)+(((-54.5701754385965)*sj13*x67))+(((744.4760118498)*(cj14*cj14)))+(((744.4760118498)*(x67*x67)))+(((1962.61157279163)*cj14))+(sj13*sj13));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x68=py*py*py*py;
IkReal x69=sj13*sj13*sj13*sj13;
IkReal x70=px*px;
IkReal x71=py*py;
IkReal x72=cj13*cj13;
IkReal x73=sj13*sj13;
IkReal x74=cj13*cj13*cj13*cj13;
IkReal x75=((1.0)*px*py);
IkReal x76=((2.0)*x72);
IkReal x77=(x71*x73);
IkReal x78=(x70*x71);
j11eval[0]=(((x70*x76*x77))+((x68*x73*x76))+((x69*x78))+((x68*x74))+((x68*x69))+((x74*x78)));
j11eval[1]=((IKabs(((((-1.0)*x72*x75))+(((-1.0)*x73*x75)))))+(IKabs((x77+((x71*x72))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j11, j12]

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
IkReal x79=cj13*cj13;
IkReal x80=py*py;
IkReal x81=sj13*sj13;
IkReal x82=((1.0)*px*py);
IkReal x83=(((x79*x80))+((x80*x81)));
IkReal x84=((((-1.0)*x81*x82))+(((-1.0)*x79*x82)));
CheckValue<IkReal> x87 = IKatan2WithCheck(IkReal(x83),IkReal(x84),IKFAST_ATAN2_MAGTHRESH);
if(!x87.valid){
continue;
}
IkReal x85=((1.0)*(x87.value));
if((((x83*x83)+(x84*x84))) < -0.00001)
continue;
CheckValue<IkReal> x88=IKPowWithIntegerCheck(IKabs(IKsqrt(((x83*x83)+(x84*x84)))),-1);
if(!x88.valid){
continue;
}
if( (((x88.value)*(((((0.31105)*py*sj13*sj14))+(((0.0114)*cj13*py)))))) < -1-IKFAST_SINCOS_THRESH || (((x88.value)*(((((0.31105)*py*sj13*sj14))+(((0.0114)*cj13*py)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x86=IKasin(((x88.value)*(((((0.31105)*py*sj13*sj14))+(((0.0114)*cj13*py))))));
j11array[0]=((((-1.0)*x86))+(((-1.0)*x85)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x86+(((-1.0)*x85)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x89=px*px;
IkReal x90=sj13*sj13;
IkReal x91=cj13*cj13;
IkReal x92=IKcos(j11);
IkReal x93=IKsin(j11);
IkReal x94=(px*py);
IkReal x95=((0.0114)*cj13);
IkReal x96=((0.31105)*sj13*sj14);
IkReal x97=((1.0)*x89);
evalcond[0]=(((px*x95))+((px*x96))+((x93*(((((-1.0)*x90*x97))+(((-1.0)*x91*x97))))))+((x92*((((x90*x94))+((x91*x94)))))));
evalcond[1]=((((-1.0)*px*x93))+((py*x92))+x95+x96);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[2];
IkReal x98=(pz*sj13);
IkReal x99=(cj13*sj14);
IkReal x100=(py*sj11);
IkReal x101=(cj11*px);
IkReal x102=((229.769159741459)*cj14);
IkReal x103=((0.31105)*cj14);
j12eval[0]=((((-27.2850877192982)*x99))+(((-1.0)*x101*x102))+(((-1.0)*x100*x102))+(((-302.86241920591)*x101))+(((-302.86241920591)*x100))+sj13+(((8.42105263157895)*x98))+(((-229.769159741459)*pz*x99)));
j12eval[1]=IKsign(((((-0.0369371875)*x99))+(((-1.0)*x101*x103))+(((-0.31105)*pz*x99))+(((0.0114)*x98))+(((-1.0)*x100*x103))+(((-0.41)*x101))+(((-0.41)*x100))+(((0.00135375)*sj13))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x104=cj13*cj13;
IkReal x105=cj14*cj14;
IkReal x106=(cj13*sj13*sj14);
IkReal x107=((13.6425438596491)*x105);
IkReal x108=((0.0967521025)*x105);
j12eval[0]=((-23.7212892382056)+(((-35.9649122807018)*cj14))+(((-1.0)*x107))+(((-13.6242188315186)*x104))+x106+((x104*x107)));
j12eval[1]=IKsign(((-0.16822996)+(((-0.255061)*cj14))+(((-1.0)*x108))+(((-0.0966221425)*x104))+(((0.00709194)*x106))+((x104*x108))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x109=(py*sj11);
IkReal x110=((0.0114)*sj13);
IkReal x111=(cj13*sj14);
IkReal x112=(cj14*pz);
IkReal x113=(cj11*px);
j12eval[0]=((4.27083333333333)+(((3.24010416666667)*cj14))+(((27.2850877192982)*x112))+(((-27.2850877192982)*x109*x111))+(((35.9649122807018)*pz))+(((-27.2850877192982)*x111*x113))+((sj13*x113))+((sj13*x109)));
j12eval[1]=IKsign(((0.0486875)+((x110*x113))+(((-0.31105)*x109*x111))+(((-0.31105)*x111*x113))+((x109*x110))+(((0.41)*pz))+(((0.31105)*x112))+(((0.0369371875)*cj14))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x114=cj11*cj11;
IkReal x115=py*py;
IkReal x116=(py*sj11);
IkReal x117=((0.0114)*sj13);
IkReal x118=(cj11*px);
IkReal x119=(cj13*sj14);
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKsign(((0.0486875)+(((0.31105)*cj14*pz))+(((0.41)*pz))+(((-0.31105)*x118*x119))+((x116*x117))+(((-0.31105)*x116*x119))+(((0.0369371875)*cj14))+((x117*x118)))),-1);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(((((-0.0967521025)*cj14*x119))+(((0.11875)*x118))+(((0.11875)*x116))+((pz*x118))+((pz*x116))+(((-0.1275305)*x119))+(((0.00354597)*cj14*sj13))+(((0.004674)*sj13)))),IkReal(((-0.1681)+(((-0.255061)*cj14))+((x114*(px*px)))+(((2.0)*x116*x118))+x115+(((-0.0967521025)*(cj14*cj14)))+(((-1.0)*x114*x115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x120.value)))+(x121.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x122=IKcos(j12);
IkReal x123=IKsin(j12);
IkReal x124=((1.0)*pz);
IkReal x125=((0.0114)*sj13);
IkReal x126=((0.31105)*sj14);
IkReal x127=((0.31105)*cj14);
IkReal x128=(px*sj11);
IkReal x129=(py*sj11);
IkReal x130=(cj13*x123);
IkReal x131=((1.0)*cj11*py);
IkReal x132=((1.0)*x129);
IkReal x133=(cj13*x122);
IkReal x134=((1.0)*cj11*px);
IkReal x135=(sj13*x123);
IkReal x136=(pz*x122);
IkReal x137=(sj13*x122);
IkReal x138=(cj11*px*x123);
evalcond[0]=((0.41)+(((-1.0)*x123*x134))+(((-1.0)*x123*x132))+(((0.11875)*x122))+x136+x127);
evalcond[1]=((-0.11875)+(((-1.0)*x126*x130))+(((-0.41)*x122))+(((-1.0)*x124))+((x123*x125))+(((-1.0)*x122*x127)));
evalcond[2]=((-0.0853195)+(((-0.097375)*x122))+(((0.82)*x123*x129))+(((-0.2375)*pz))+(((-1.0)*pp))+(((-0.82)*x136))+(((0.82)*x138)));
evalcond[3]=((((-1.0)*x126*x133))+((x122*x125))+(((-1.0)*x134))+(((-1.0)*x132))+((x123*x127))+(((0.41)*x123)));
evalcond[4]=((-0.0114)+(((-1.0)*cj13*x131))+((x129*x137))+(((0.11875)*x135))+((cj13*x128))+((pz*x135))+((cj11*px*x137)));
evalcond[5]=((((-1.0)*sj13*x131))+(((-1.0)*x124*x130))+(((-1.0)*x133*x134))+(((-1.0)*x126))+(((-1.0)*x132*x133))+((sj13*x128))+(((-0.11875)*x130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1060=cj14*cj14;
IkReal x1061=cj13*cj13;
IkReal x1062=(py*sj11);
IkReal x1063=((0.0114)*sj13);
IkReal x1064=(cj13*sj14);
IkReal x1065=((0.31105)*cj14);
IkReal x1066=(cj11*px);
IkReal x1067=((0.0967521025)*x1060);
CheckValue<IkReal> x1068 = IKatan2WithCheck(IkReal(((((-0.41)*x1062))+(((-0.41)*x1066))+(((-0.00135375)*sj13))+(((-1.0)*x1062*x1065))+(((-1.0)*pz*x1063))+(((0.31105)*pz*x1064))+(((0.0369371875)*x1064))+(((-1.0)*x1065*x1066)))),IkReal(((0.0486875)+(((-1.0)*x1063*x1066))+((pz*x1065))+(((-1.0)*x1062*x1063))+(((0.41)*pz))+(((0.31105)*x1064*x1066))+(((0.31105)*x1062*x1064))+(((0.0369371875)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1068.valid){
continue;
}
CheckValue<IkReal> x1069=IKPowWithIntegerCheck(IKsign(((-0.16822996)+(((-0.255061)*cj14))+((x1061*x1067))+(((-0.0966221425)*x1061))+(((0.00709194)*sj13*x1064))+(((-1.0)*x1067)))),-1);
if(!x1069.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1068.value)+(((1.5707963267949)*(x1069.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1070=IKcos(j12);
IkReal x1071=IKsin(j12);
IkReal x1072=((1.0)*pz);
IkReal x1073=((0.0114)*sj13);
IkReal x1074=((0.31105)*sj14);
IkReal x1075=((0.31105)*cj14);
IkReal x1076=(px*sj11);
IkReal x1077=(py*sj11);
IkReal x1078=(cj13*x1071);
IkReal x1079=((1.0)*cj11*py);
IkReal x1080=((1.0)*x1077);
IkReal x1081=(cj13*x1070);
IkReal x1082=((1.0)*cj11*px);
IkReal x1083=(sj13*x1071);
IkReal x1084=(pz*x1070);
IkReal x1085=(sj13*x1070);
IkReal x1086=(cj11*px*x1071);
evalcond[0]=((0.41)+x1075+x1084+(((0.11875)*x1070))+(((-1.0)*x1071*x1082))+(((-1.0)*x1071*x1080)));
evalcond[1]=((-0.11875)+(((-0.41)*x1070))+(((-1.0)*x1074*x1078))+(((-1.0)*x1070*x1075))+((x1071*x1073))+(((-1.0)*x1072)));
evalcond[2]=((-0.0853195)+(((-0.2375)*pz))+(((-0.82)*x1084))+(((0.82)*x1086))+(((-1.0)*pp))+(((0.82)*x1071*x1077))+(((-0.097375)*x1070)));
evalcond[3]=((((-1.0)*x1074*x1081))+(((0.41)*x1071))+((x1070*x1073))+((x1071*x1075))+(((-1.0)*x1080))+(((-1.0)*x1082)));
evalcond[4]=((-0.0114)+((pz*x1083))+(((-1.0)*cj13*x1079))+((cj11*px*x1085))+((x1077*x1085))+(((0.11875)*x1083))+((cj13*x1076)));
evalcond[5]=((((-0.11875)*x1078))+(((-1.0)*sj13*x1079))+(((-1.0)*x1081*x1082))+(((-1.0)*x1080*x1081))+((sj13*x1076))+(((-1.0)*x1072*x1078))+(((-1.0)*x1074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1087=(cj11*px);
IkReal x1088=(py*sj11);
IkReal x1089=(cj13*sj14);
IkReal x1090=((0.31105)*cj14);
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal(((-0.1539984375)+(((-0.255061)*cj14))+(((0.2375)*pz))+(pz*pz)+(((-0.0967521025)*(cj14*cj14))))),IkReal((((pz*x1087))+((pz*x1088))+(((-0.004674)*sj13))+(((0.0967521025)*cj14*x1089))+(((0.11875)*x1087))+(((0.11875)*x1088))+(((0.1275305)*x1089))+(((-0.00354597)*cj14*sj13)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1088*x1090))+(((-0.41)*x1087))+(((-0.41)*x1088))+(((-0.0369371875)*x1089))+(((0.00135375)*sj13))+(((-1.0)*x1087*x1090))+(((-0.31105)*pz*x1089))+(((0.0114)*pz*sj13)))),-1);
if(!x1092.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1091.value)+(((1.5707963267949)*(x1092.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1093=IKcos(j12);
IkReal x1094=IKsin(j12);
IkReal x1095=((1.0)*pz);
IkReal x1096=((0.0114)*sj13);
IkReal x1097=((0.31105)*sj14);
IkReal x1098=((0.31105)*cj14);
IkReal x1099=(px*sj11);
IkReal x1100=(py*sj11);
IkReal x1101=(cj13*x1094);
IkReal x1102=((1.0)*cj11*py);
IkReal x1103=((1.0)*x1100);
IkReal x1104=(cj13*x1093);
IkReal x1105=((1.0)*cj11*px);
IkReal x1106=(sj13*x1094);
IkReal x1107=(pz*x1093);
IkReal x1108=(sj13*x1093);
IkReal x1109=(cj11*px*x1094);
evalcond[0]=((0.41)+x1107+x1098+(((-1.0)*x1094*x1103))+(((-1.0)*x1094*x1105))+(((0.11875)*x1093)));
evalcond[1]=((-0.11875)+(((-1.0)*x1095))+((x1094*x1096))+(((-1.0)*x1093*x1098))+(((-0.41)*x1093))+(((-1.0)*x1097*x1101)));
evalcond[2]=((-0.0853195)+(((-0.82)*x1107))+(((-0.2375)*pz))+(((0.82)*x1109))+(((-0.097375)*x1093))+(((-1.0)*pp))+(((0.82)*x1094*x1100)));
evalcond[3]=(((x1094*x1098))+(((0.41)*x1094))+((x1093*x1096))+(((-1.0)*x1103))+(((-1.0)*x1105))+(((-1.0)*x1097*x1104)));
evalcond[4]=((-0.0114)+(((-1.0)*cj13*x1102))+(((0.11875)*x1106))+((cj13*x1099))+((pz*x1106))+((x1100*x1108))+((cj11*px*x1108)));
evalcond[5]=((((-1.0)*x1103*x1104))+((sj13*x1099))+(((-1.0)*sj13*x1102))+(((-1.0)*x1097))+(((-1.0)*x1104*x1105))+(((-1.0)*x1095*x1101))+(((-0.11875)*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1110=((-0.41)+(((-0.31105)*cj14)));
IkReal x1111=((((0.0114)*sj13))+(((-0.31105)*cj13*sj14)));
CheckValue<IkReal> x1114 = IKatan2WithCheck(IkReal(x1110),IkReal(x1111),IKFAST_ATAN2_MAGTHRESH);
if(!x1114.valid){
continue;
}
IkReal x1112=((1.0)*(x1114.value));
if((((x1111*x1111)+(x1110*x1110))) < -0.00001)
continue;
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1111*x1111)+(x1110*x1110)))),-1);
if(!x1115.valid){
continue;
}
if( (((-1.0)*(x1115.value)*(((-0.11875)+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1115.value)*(((-0.11875)+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1113=((-1.0)*(IKasin(((-1.0)*(x1115.value)*(((-0.11875)+(((-1.0)*pz))))))));
j12array[0]=((((-1.0)*x1112))+(((-1.0)*x1113)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((1.0)*x1113))+(((-1.0)*x1112)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j11eval[3];
IkReal x1116=(cj12*pz);
IkReal x1117=((0.31105)*py);
IkReal x1118=((0.31105)*px);
IkReal x1119=((0.11875)*cj12);
IkReal x1120=(sj12*sj13*sj14);
IkReal x1121=((0.0114)*cj13*sj12);
IkReal x1122=((((-1.0)*sj12*(pz*pz)))+((pp*sj12)));
j11eval[0]=x1122;
j11eval[1]=IKsign(x1122);
j11eval[2]=((IKabs(((((-1.0)*x1117*x1120))+(((-1.0)*py*x1121))+(((0.41)*px))+((px*x1116))+((px*x1119))+((cj14*x1118)))))+(IKabs((((px*x1121))+(((0.41)*py))+((py*x1119))+((py*x1116))+((x1118*x1120))+((cj14*x1117))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x1123=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1123;
j11eval[1]=IKsign(x1123);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
IkReal x1124=pz*pz;
IkReal x1125=(pp*sj12);
IkReal x1126=(sj12*x1124);
j11eval[0]=(x1125+(((-1.0)*x1126)));
j11eval[1]=IKsign(((((41.0)*x1125))+(((-41.0)*x1126))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1127=(cj13*py);
IkReal x1128=((0.31105)*sj14);
IkReal x1129=((0.0114)*px);
IkReal x1130=(py*sj13);
IkReal x1131=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1131;
j11eval[1]=((IKabs(((((0.0114)*x1130))+((px*sj13*x1128))+(((-1.0)*x1127*x1128))+((cj13*x1129)))))+(IKabs(((((-0.0114)*x1127))+(((-1.0)*cj13*px*x1128))+(((-1.0)*x1128*x1130))+((sj13*x1129))))));
j11eval[2]=IKsign(x1131);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1132=pz*pz;
IkReal x1133=cj13*cj13;
IkReal x1134=(cj13*pp);
IkReal x1135=(cj13*sj13);
IkReal x1136=((228.0)*px);
IkReal x1137=((6221.0)*sj14);
IkReal x1138=((228.0)*py);
IkReal x1139=(cj13*x1132);
j11eval[0]=(x1139+(((-1.0)*x1134)));
j11eval[1]=IKsign(((((5000.0)*x1139))+(((-5000.0)*x1134))));
j11eval[2]=((IKabs(((((-1.0)*px*x1135*x1137))+((py*x1133*x1137))+(((-1.0)*x1135*x1138))+(((-1.0)*x1133*x1136)))))+(IKabs((((py*x1135*x1137))+(((-1.0)*x1135*x1136))+((px*x1133*x1137))+((x1133*x1138))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[2];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1140=pz*pz;
IkReal x1141=(pp*sj13);
IkReal x1142=(sj13*x1140);
j11eval[0]=(x1141+(((-1.0)*x1142)));
j11eval[1]=IKsign(((((5000.0)*x1141))+(((-5000.0)*x1142))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x1143=pz*pz;
IkReal x1144=((6221.0)*sj14);
j11eval[0]=((((-1.0)*x1143))+pp);
j11eval[1]=IKsign(((((-20000.0)*x1143))+(((20000.0)*pp))));
j11eval[2]=((IKabs(((((-228.0)*py))+(((-1.0)*px*x1144)))))+(IKabs(((((228.0)*px))+(((-1.0)*py*x1144))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1145=((6221.0)*sj14);
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(((((228.0)*px))+(((-1.0)*py*x1145)))),IkReal(((((-228.0)*py))+(((-1.0)*px*x1145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(IKsign(((((-20000.0)*(pz*pz)))+(((20000.0)*pp)))),-1);
if(!x1147.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1146.value)+(((1.5707963267949)*(x1147.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1148=IKsin(j11);
IkReal x1149=IKcos(j11);
IkReal x1150=((1.0)*px);
evalcond[0]=((0.0114)+((py*x1149))+(((-1.0)*x1148*x1150)));
evalcond[1]=((((-1.0)*x1149*x1150))+(((-1.0)*py*x1148))+(((-0.31105)*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x1151=pz*pz;
IkReal x1152=((6221.0)*sj14);
j11eval[0]=((((-1.0)*x1151))+pp);
j11eval[1]=IKsign(((((-20000.0)*x1151))+(((20000.0)*pp))));
j11eval[2]=((IKabs(((((228.0)*py))+((px*x1152)))))+(IKabs(((((-228.0)*px))+((py*x1152))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1153=((6221.0)*sj14);
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal(((((-228.0)*px))+((py*x1153)))),IkReal(((((228.0)*py))+((px*x1153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(IKsign(((((-20000.0)*(pz*pz)))+(((20000.0)*pp)))),-1);
if(!x1155.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1154.value)+(((1.5707963267949)*(x1155.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1156=IKsin(j11);
IkReal x1157=IKcos(j11);
IkReal x1158=((1.0)*px);
evalcond[0]=((-0.0114)+(((-1.0)*x1156*x1158))+((py*x1157)));
evalcond[1]=((((-1.0)*x1157*x1158))+(((0.31105)*sj14))+(((-1.0)*py*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1159=pz*pz;
IkReal x1160=((6221.0)*sj14);
j11eval[0]=((((-1.0)*x1159))+pp);
j11eval[1]=IKsign(((((-20000.0)*x1159))+(((20000.0)*pp))));
j11eval[2]=((IKabs(((((228.0)*px))+(((-1.0)*py*x1160)))))+(IKabs((((px*x1160))+(((228.0)*py))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1161=((6221.0)*sj14);
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal((((px*x1161))+(((228.0)*py)))),IkReal(((((228.0)*px))+(((-1.0)*py*x1161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(IKsign(((((-20000.0)*(pz*pz)))+(((20000.0)*pp)))),-1);
if(!x1163.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1162.value)+(((1.5707963267949)*(x1163.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1164=IKcos(j11);
IkReal x1165=IKsin(j11);
IkReal x1166=((1.0)*px);
evalcond[0]=((0.0114)+(((-1.0)*py*x1165))+(((-1.0)*x1164*x1166)));
evalcond[1]=((((0.31105)*sj14))+((py*x1164))+(((-1.0)*x1165*x1166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1167=pz*pz;
IkReal x1168=((6221.0)*sj14);
j11eval[0]=(x1167+(((-1.0)*pp)));
j11eval[1]=IKsign(((((-20000.0)*pp))+(((20000.0)*x1167))));
j11eval[2]=((IKabs((((px*x1168))+(((228.0)*py)))))+(IKabs(((((228.0)*px))+(((-1.0)*py*x1168))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1169=((6221.0)*sj14);
CheckValue<IkReal> x1170 = IKatan2WithCheck(IkReal((((px*x1169))+(((228.0)*py)))),IkReal(((((228.0)*px))+(((-1.0)*py*x1169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1170.valid){
continue;
}
CheckValue<IkReal> x1171=IKPowWithIntegerCheck(IKsign(((((-20000.0)*pp))+(((20000.0)*(pz*pz))))),-1);
if(!x1171.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1170.value)+(((1.5707963267949)*(x1171.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1172=IKcos(j11);
IkReal x1173=IKsin(j11);
IkReal x1174=((1.0)*px);
evalcond[0]=((-0.0114)+(((-1.0)*x1172*x1174))+(((-1.0)*py*x1173)));
evalcond[1]=((((-1.0)*x1173*x1174))+(((-0.31105)*sj14))+((py*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1175=cj13*cj13;
IkReal x1176=((1555.25)*sj14);
IkReal x1177=((5000.0)*sj13);
IkReal x1178=(cj13*sj13);
IkReal x1179=((57.0)*py);
IkReal x1180=((57.0)*px);
IkReal x1181=(py*x1175);
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1175*x1176))+x1179+((x1178*x1180))+((px*x1176))+(((-1.0)*py*x1176*x1178))+(((-1.0)*x1175*x1179)))),IkReal(((((-1.0)*x1175*x1180))+x1180+((x1176*x1181))+(((-1.0)*py*x1176))+(((-1.0)*x1178*x1179))+(((-1.0)*px*x1176*x1178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183=IKPowWithIntegerCheck(IKsign((((pp*x1177))+(((-1.0)*x1177*(pz*pz))))),-1);
if(!x1183.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1182.value)+(((1.5707963267949)*(x1183.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1184=IKsin(j11);
IkReal x1185=IKcos(j11);
IkReal x1186=(px*sj13);
IkReal x1187=(py*sj13);
IkReal x1188=(cj13*px);
IkReal x1189=(cj13*py);
IkReal x1190=((0.31105)*sj14);
IkReal x1191=((1.0)*x1185);
IkReal x1192=((1.0)*x1184);
evalcond[0]=(((py*x1185))+(((0.0114)*cj13))+(((-1.0)*px*x1192))+((sj13*x1190)));
evalcond[1]=((((0.0114)*sj13))+(((-1.0)*cj13*x1190))+(((-1.0)*py*x1192))+(((-1.0)*px*x1191)));
evalcond[2]=((-0.0114)+((x1184*x1187))+((x1184*x1188))+(((-1.0)*x1189*x1191))+((x1185*x1186)));
evalcond[3]=(((x1184*x1186))+(((-1.0)*x1189*x1192))+(((-1.0)*x1188*x1191))+(((-1.0)*x1190))+(((-1.0)*x1187*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1193=cj13*cj13;
IkReal x1194=((5000.0)*cj13);
IkReal x1195=((1555.25)*sj14);
IkReal x1196=(cj13*sj13);
IkReal x1197=(px*x1193);
IkReal x1198=(py*x1193);
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1194))+((x1194*(pz*pz))))),-1);
if(!x1199.valid){
continue;
}
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal((((x1195*x1198))+(((-57.0)*py*x1196))+(((-57.0)*x1197))+(((-1.0)*px*x1195*x1196)))),IkReal((((x1195*x1197))+((py*x1195*x1196))+(((57.0)*x1198))+(((-57.0)*px*x1196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1199.value)))+(x1200.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1201=IKsin(j11);
IkReal x1202=IKcos(j11);
IkReal x1203=(px*sj13);
IkReal x1204=(py*sj13);
IkReal x1205=(cj13*px);
IkReal x1206=(cj13*py);
IkReal x1207=((0.31105)*sj14);
IkReal x1208=((1.0)*x1202);
IkReal x1209=((1.0)*x1201);
evalcond[0]=(((sj13*x1207))+(((0.0114)*cj13))+((py*x1202))+(((-1.0)*px*x1209)));
evalcond[1]=((((0.0114)*sj13))+(((-1.0)*px*x1208))+(((-1.0)*cj13*x1207))+(((-1.0)*py*x1209)));
evalcond[2]=((-0.0114)+((x1202*x1203))+((x1201*x1205))+((x1201*x1204))+(((-1.0)*x1206*x1208)));
evalcond[3]=((((-1.0)*x1204*x1208))+(((-1.0)*x1205*x1208))+((x1201*x1203))+(((-1.0)*x1207))+(((-1.0)*x1206*x1209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1210=((0.0114)*py);
IkReal x1211=(px*sj13);
IkReal x1212=((0.31105)*sj14);
IkReal x1213=(cj13*px);
IkReal x1214=(py*x1212);
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1215.valid){
continue;
}
CheckValue<IkReal> x1216 = IKatan2WithCheck(IkReal(((((-1.0)*cj13*x1214))+(((0.0114)*x1213))+((sj13*x1210))+((x1211*x1212)))),IkReal(((((-1.0)*cj13*x1210))+(((0.0114)*x1211))+(((-1.0)*x1212*x1213))+(((-1.0)*sj13*x1214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1216.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1215.value)))+(x1216.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1217=IKsin(j11);
IkReal x1218=IKcos(j11);
IkReal x1219=(px*sj13);
IkReal x1220=(py*sj13);
IkReal x1221=(cj13*px);
IkReal x1222=(cj13*py);
IkReal x1223=((0.31105)*sj14);
IkReal x1224=((1.0)*x1218);
IkReal x1225=((1.0)*x1217);
evalcond[0]=((((-1.0)*px*x1225))+(((0.0114)*cj13))+((sj13*x1223))+((py*x1218)));
evalcond[1]=((((0.0114)*sj13))+(((-1.0)*px*x1224))+(((-1.0)*cj13*x1223))+(((-1.0)*py*x1225)));
evalcond[2]=((-0.0114)+((x1217*x1221))+((x1217*x1220))+((x1218*x1219))+(((-1.0)*x1222*x1224)));
evalcond[3]=((((-1.0)*x1223))+(((-1.0)*x1220*x1224))+(((-1.0)*x1221*x1224))+(((-1.0)*x1222*x1225))+((x1217*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1226=(cj13*py);
IkReal x1227=((0.31105)*sj14);
IkReal x1228=((0.0114)*px);
IkReal x1229=(py*sj13);
IkReal x1230=(pp+(((-1.0)*(pz*pz))));
j11eval[0]=x1230;
j11eval[1]=((IKabs(((((-1.0)*sj13*x1228))+(((-1.0)*x1227*x1229))+((cj13*px*x1227))+(((-0.0114)*x1226)))))+(IKabs((((px*sj13*x1227))+((cj13*x1228))+((x1226*x1227))+(((-0.0114)*x1229))))));
j11eval[2]=IKsign(x1230);
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1231=cj13*cj13;
IkReal x1232=pz*pz;
IkReal x1233=(cj13*sj13);
IkReal x1234=((228.0)*px);
IkReal x1235=(cj13*pp);
IkReal x1236=((6221.0)*sj14);
IkReal x1237=((228.0)*py);
IkReal x1238=(cj13*x1232);
j11eval[0]=((((-1.0)*x1238))+x1235);
j11eval[1]=((IKabs(((((-1.0)*py*x1233*x1236))+((px*x1231*x1236))+(((-1.0)*x1233*x1234))+(((-1.0)*x1231*x1237)))))+(IKabs((((px*x1233*x1236))+((x1231*x1234))+(((-1.0)*x1233*x1237))+((py*x1231*x1236))))));
j11eval[2]=IKsign(((((-20000.0)*x1238))+(((20000.0)*x1235))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1239=cj13*cj13;
IkReal x1240=pz*pz;
IkReal x1241=(cj13*pp);
IkReal x1242=(cj13*sj13);
IkReal x1243=((228.0)*px);
IkReal x1244=((6221.0)*sj14);
IkReal x1245=((228.0)*py);
IkReal x1246=(cj13*x1240);
j11eval[0]=(x1246+(((-1.0)*x1241)));
j11eval[1]=((IKabs(((((-1.0)*x1239*x1243))+((x1242*x1245))+(((-1.0)*py*x1239*x1244))+(((-1.0)*px*x1242*x1244)))))+(IKabs(((((-1.0)*px*x1239*x1244))+((py*x1242*x1244))+((x1239*x1245))+((x1242*x1243))))));
j11eval[2]=IKsign(((((5000.0)*x1246))+(((-5000.0)*x1241))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1247=pz*pz;
IkReal x1248=((6221.0)*sj14);
j11eval[0]=((((-1.0)*x1247))+pp);
j11eval[1]=IKsign(((((20000.0)*pp))+(((-20000.0)*x1247))));
j11eval[2]=((IKabs(((((-228.0)*py))+((px*x1248)))))+(IKabs(((((-1.0)*py*x1248))+(((-228.0)*px))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1249=((6221.0)*sj14);
CheckValue<IkReal> x1250 = IKatan2WithCheck(IkReal(((((-228.0)*py))+((px*x1249)))),IkReal(((((-1.0)*py*x1249))+(((-228.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1250.valid){
continue;
}
CheckValue<IkReal> x1251=IKPowWithIntegerCheck(IKsign(((((-20000.0)*(pz*pz)))+(((20000.0)*pp)))),-1);
if(!x1251.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1250.value)+(((1.5707963267949)*(x1251.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1252=IKcos(j11);
IkReal x1253=IKsin(j11);
IkReal x1254=((1.0)*px);
evalcond[0]=((-0.0114)+(((-1.0)*py*x1253))+(((-1.0)*x1252*x1254)));
evalcond[1]=((((0.31105)*sj14))+(((-1.0)*x1253*x1254))+((py*x1252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j11eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1255=pz*pz;
IkReal x1256=((6221.0)*sj14);
j11eval[0]=(pp+(((-1.0)*x1255)));
j11eval[1]=IKsign(((((20000.0)*pp))+(((-20000.0)*x1255))));
j11eval[2]=((IKabs(((((228.0)*px))+((py*x1256)))))+(IKabs(((((228.0)*py))+(((-1.0)*px*x1256))))));
if( IKabs(j11eval[0]) < 0.0000010000000000  || IKabs(j11eval[1]) < 0.0000010000000000  || IKabs(j11eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j11]

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1257=((6221.0)*sj14);
CheckValue<IkReal> x1258 = IKatan2WithCheck(IkReal(((((228.0)*py))+(((-1.0)*px*x1257)))),IkReal(((((228.0)*px))+((py*x1257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1258.valid){
continue;
}
CheckValue<IkReal> x1259=IKPowWithIntegerCheck(IKsign(((((-20000.0)*(pz*pz)))+(((20000.0)*pp)))),-1);
if(!x1259.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1258.value)+(((1.5707963267949)*(x1259.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[2];
IkReal x1260=IKcos(j11);
IkReal x1261=IKsin(j11);
IkReal x1262=((1.0)*px);
evalcond[0]=((0.0114)+(((-1.0)*x1260*x1262))+(((-1.0)*py*x1261)));
evalcond[1]=((((-1.0)*x1261*x1262))+(((-0.31105)*sj14))+((py*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1263=cj13*cj13;
IkReal x1264=((5000.0)*cj13);
IkReal x1265=((1555.25)*sj14);
IkReal x1266=(cj13*sj13);
IkReal x1267=(px*x1263);
IkReal x1268=(py*x1263);
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal(((((57.0)*py*x1266))+(((-57.0)*x1267))+(((-1.0)*x1265*x1268))+(((-1.0)*px*x1265*x1266)))),IkReal((((py*x1265*x1266))+(((57.0)*x1268))+(((-1.0)*x1265*x1267))+(((57.0)*px*x1266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1264))+((x1264*(pz*pz))))),-1);
if(!x1270.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1269.value)+(((1.5707963267949)*(x1270.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1271=IKsin(j11);
IkReal x1272=IKcos(j11);
IkReal x1273=((1.0)*sj13);
IkReal x1274=((0.31105)*sj14);
IkReal x1275=(px*x1271);
IkReal x1276=(py*x1271);
IkReal x1277=(py*x1272);
IkReal x1278=(px*x1272);
evalcond[0]=(x1277+(((0.0114)*cj13))+((sj13*x1274))+(((-1.0)*x1275)));
evalcond[1]=(((cj13*x1274))+(((-1.0)*x1276))+(((-1.0)*x1278))+(((-0.0114)*sj13)));
evalcond[2]=((-0.0114)+(((-1.0)*cj13*x1277))+((cj13*x1275))+(((-1.0)*x1273*x1278))+(((-1.0)*x1273*x1276)));
evalcond[3]=((((-1.0)*x1274))+((cj13*x1278))+((cj13*x1276))+(((-1.0)*x1273*x1277))+((sj13*x1275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1279=cj13*cj13;
IkReal x1280=(cj13*sj13);
IkReal x1281=((228.0)*px);
IkReal x1282=((6221.0)*sj14);
IkReal x1283=((20000.0)*cj13);
IkReal x1284=(py*x1279);
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal((((x1279*x1281))+((x1282*x1284))+(((-228.0)*py*x1280))+((px*x1280*x1282)))),IkReal(((((-228.0)*x1284))+(((-1.0)*py*x1280*x1282))+((px*x1279*x1282))+(((-1.0)*x1280*x1281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign((((pp*x1283))+(((-1.0)*x1283*(pz*pz))))),-1);
if(!x1286.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1285.value)+(((1.5707963267949)*(x1286.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1287=IKsin(j11);
IkReal x1288=IKcos(j11);
IkReal x1289=((1.0)*sj13);
IkReal x1290=((0.31105)*sj14);
IkReal x1291=(px*x1287);
IkReal x1292=(py*x1287);
IkReal x1293=(py*x1288);
IkReal x1294=(px*x1288);
evalcond[0]=(x1293+((sj13*x1290))+(((0.0114)*cj13))+(((-1.0)*x1291)));
evalcond[1]=(((cj13*x1290))+(((-1.0)*x1292))+(((-1.0)*x1294))+(((-0.0114)*sj13)));
evalcond[2]=((-0.0114)+(((-1.0)*cj13*x1293))+(((-1.0)*x1289*x1292))+(((-1.0)*x1289*x1294))+((cj13*x1291)));
evalcond[3]=(((sj13*x1291))+(((-1.0)*x1290))+(((-1.0)*x1289*x1293))+((cj13*x1294))+((cj13*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1295=((0.0114)*py);
IkReal x1296=(px*sj13);
IkReal x1297=((0.31105)*sj14);
IkReal x1298=(cj13*px);
IkReal x1299=(py*x1297);
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1300.valid){
continue;
}
CheckValue<IkReal> x1301 = IKatan2WithCheck(IkReal((((x1296*x1297))+(((-1.0)*sj13*x1295))+(((0.0114)*x1298))+((cj13*x1299)))),IkReal((((x1297*x1298))+(((-1.0)*sj13*x1299))+(((-1.0)*cj13*x1295))+(((-0.0114)*x1296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1301.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1300.value)))+(x1301.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[4];
IkReal x1302=IKsin(j11);
IkReal x1303=IKcos(j11);
IkReal x1304=((1.0)*sj13);
IkReal x1305=((0.31105)*sj14);
IkReal x1306=(px*x1302);
IkReal x1307=(py*x1302);
IkReal x1308=(py*x1303);
IkReal x1309=(px*x1303);
evalcond[0]=(x1308+(((-1.0)*x1306))+((sj13*x1305))+(((0.0114)*cj13)));
evalcond[1]=((((-1.0)*x1309))+(((-1.0)*x1307))+(((-0.0114)*sj13))+((cj13*x1305)));
evalcond[2]=((-0.0114)+(((-1.0)*cj13*x1308))+(((-1.0)*x1304*x1309))+(((-1.0)*x1304*x1307))+((cj13*x1306)));
evalcond[3]=(((sj13*x1306))+(((-1.0)*x1305))+(((-1.0)*x1304*x1308))+((cj13*x1309))+((cj13*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j11]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1310=(py*sj12);
IkReal x1311=((0.4674)*cj13);
IkReal x1312=(px*sj12);
IkReal x1313=(cj12*py);
IkReal x1314=((41.0)*sj12);
IkReal x1315=((50.0)*pp);
IkReal x1316=((11.875)*pz);
IkReal x1317=((41.0)*pz);
IkReal x1318=(cj12*px);
IkReal x1319=((12.75305)*sj13*sj14);
CheckValue<IkReal> x1320=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1314*(pz*pz)))+((pp*x1314)))),-1);
if(!x1320.valid){
continue;
}
CheckValue<IkReal> x1321 = IKatan2WithCheck(IkReal((((x1311*x1312))+(((4.86875)*x1313))+((x1313*x1317))+((py*x1316))+((py*x1315))+(((4.265975)*py))+((x1312*x1319)))),IkReal((((x1317*x1318))+(((4.86875)*x1318))+((px*x1315))+((px*x1316))+(((4.265975)*px))+(((-1.0)*x1310*x1311))+(((-1.0)*x1310*x1319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1321.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1320.value)))+(x1321.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1322=IKcos(j11);
IkReal x1323=IKsin(j11);
IkReal x1324=(cj12*pz);
IkReal x1325=((0.31105)*sj14);
IkReal x1326=(pz*sj12);
IkReal x1327=((0.31105)*cj14);
IkReal x1328=(cj12*sj13);
IkReal x1329=((1.0)*cj13);
IkReal x1330=((0.11875)*sj12);
IkReal x1331=(cj12*cj13);
IkReal x1332=((0.82)*sj12);
IkReal x1333=((1.0)*x1323);
IkReal x1334=(py*x1322);
IkReal x1335=(py*x1323);
IkReal x1336=(px*x1322);
IkReal x1337=(px*x1323);
IkReal x1338=((1.0)*x1336);
evalcond[0]=(x1334+((sj13*x1325))+(((-1.0)*px*x1333))+(((0.0114)*cj13)));
evalcond[1]=((0.41)+x1327+x1324+(((0.11875)*cj12))+(((-1.0)*sj12*x1338))+(((-1.0)*py*sj12*x1333)));
evalcond[2]=((-0.0853195)+(((-0.2375)*pz))+(((-0.82)*x1324))+(((-1.0)*pp))+(((-0.097375)*cj12))+((x1332*x1335))+((x1332*x1336)));
evalcond[3]=(((sj12*x1327))+(((-1.0)*x1325*x1331))+(((-1.0)*py*x1333))+(((0.0114)*x1328))+(((-1.0)*x1338))+(((0.41)*sj12)));
evalcond[4]=((-0.0114)+((cj13*x1337))+((sj13*x1326))+((sj13*x1330))+((x1328*x1336))+((x1328*x1335))+(((-1.0)*x1329*x1334)));
evalcond[5]=((((-1.0)*x1325))+((sj13*x1337))+(((-1.0)*x1326*x1329))+(((-1.0)*cj13*x1330))+(((-1.0)*sj13*x1334))+(((-1.0)*cj12*x1329*x1335))+(((-1.0)*cj12*x1329*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1339=(cj12*cj13);
IkReal x1340=((0.31105)*px);
IkReal x1341=(cj14*sj12);
IkReal x1342=((0.41)*sj12);
IkReal x1343=((0.0114)*cj13);
IkReal x1344=((0.31105)*py*sj14);
IkReal x1345=((0.0114)*cj12*sj13);
CheckValue<IkReal> x1346=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1346.valid){
continue;
}
CheckValue<IkReal> x1347 = IKatan2WithCheck(IkReal((((sj13*sj14*x1340))+((px*x1343))+(((-1.0)*x1339*x1344))+(((0.31105)*py*x1341))+((py*x1345))+((py*x1342)))),IkReal(((((-1.0)*sj14*x1339*x1340))+(((-1.0)*py*x1343))+((x1340*x1341))+((px*x1342))+((px*x1345))+(((-1.0)*sj13*x1344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1347.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1346.value)))+(x1347.value));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1348=IKcos(j11);
IkReal x1349=IKsin(j11);
IkReal x1350=(cj12*pz);
IkReal x1351=((0.31105)*sj14);
IkReal x1352=(pz*sj12);
IkReal x1353=((0.31105)*cj14);
IkReal x1354=(cj12*sj13);
IkReal x1355=((1.0)*cj13);
IkReal x1356=((0.11875)*sj12);
IkReal x1357=(cj12*cj13);
IkReal x1358=((0.82)*sj12);
IkReal x1359=((1.0)*x1349);
IkReal x1360=(py*x1348);
IkReal x1361=(py*x1349);
IkReal x1362=(px*x1348);
IkReal x1363=(px*x1349);
IkReal x1364=((1.0)*x1362);
evalcond[0]=(x1360+(((-1.0)*px*x1359))+(((0.0114)*cj13))+((sj13*x1351)));
evalcond[1]=((0.41)+x1353+x1350+(((0.11875)*cj12))+(((-1.0)*sj12*x1364))+(((-1.0)*py*sj12*x1359)));
evalcond[2]=((-0.0853195)+(((-0.82)*x1350))+(((-0.2375)*pz))+((x1358*x1361))+((x1358*x1362))+(((-1.0)*pp))+(((-0.097375)*cj12)));
evalcond[3]=((((-1.0)*x1351*x1357))+((sj12*x1353))+(((0.41)*sj12))+(((0.0114)*x1354))+(((-1.0)*py*x1359))+(((-1.0)*x1364)));
evalcond[4]=((-0.0114)+((x1354*x1361))+((x1354*x1362))+(((-1.0)*x1355*x1360))+((sj13*x1352))+((sj13*x1356))+((cj13*x1363)));
evalcond[5]=((((-1.0)*x1351))+(((-1.0)*x1352*x1355))+(((-1.0)*cj13*x1356))+(((-1.0)*sj13*x1360))+(((-1.0)*cj12*x1355*x1361))+(((-1.0)*cj12*x1355*x1362))+((sj13*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j11array[1], cj11array[1], sj11array[1];
bool j11valid[1]={false};
_nj11 = 1;
IkReal x1365=(cj12*pz);
IkReal x1366=((0.31105)*py);
IkReal x1367=((0.31105)*px);
IkReal x1368=((0.11875)*cj12);
IkReal x1369=(sj12*sj13*sj14);
IkReal x1370=((0.0114)*cj13*sj12);
CheckValue<IkReal> x1371 = IKatan2WithCheck(IkReal((((x1367*x1369))+((px*x1370))+((cj14*x1366))+(((0.41)*py))+((py*x1365))+((py*x1368)))),IkReal(((((-1.0)*x1366*x1369))+((cj14*x1367))+(((0.41)*px))+((px*x1365))+((px*x1368))+(((-1.0)*py*x1370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1371.valid){
continue;
}
CheckValue<IkReal> x1372=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj12*(pz*pz)))+((pp*sj12)))),-1);
if(!x1372.valid){
continue;
}
j11array[0]=((-1.5707963267949)+(x1371.value)+(((1.5707963267949)*(x1372.value))));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
for(int ij11 = 0; ij11 < 1; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 1; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];
{
IkReal evalcond[6];
IkReal x1373=IKcos(j11);
IkReal x1374=IKsin(j11);
IkReal x1375=(cj12*pz);
IkReal x1376=((0.31105)*sj14);
IkReal x1377=(pz*sj12);
IkReal x1378=((0.31105)*cj14);
IkReal x1379=(cj12*sj13);
IkReal x1380=((1.0)*cj13);
IkReal x1381=((0.11875)*sj12);
IkReal x1382=(cj12*cj13);
IkReal x1383=((0.82)*sj12);
IkReal x1384=((1.0)*x1374);
IkReal x1385=(py*x1373);
IkReal x1386=(py*x1374);
IkReal x1387=(px*x1373);
IkReal x1388=(px*x1374);
IkReal x1389=((1.0)*x1387);
evalcond[0]=(x1385+((sj13*x1376))+(((0.0114)*cj13))+(((-1.0)*px*x1384)));
evalcond[1]=((0.41)+x1375+x1378+(((-1.0)*py*sj12*x1384))+(((0.11875)*cj12))+(((-1.0)*sj12*x1389)));
evalcond[2]=((-0.0853195)+(((-0.2375)*pz))+(((-0.82)*x1375))+(((-1.0)*pp))+(((-0.097375)*cj12))+((x1383*x1386))+((x1383*x1387)));
evalcond[3]=((((-1.0)*x1389))+((sj12*x1378))+(((-1.0)*x1376*x1382))+(((0.0114)*x1379))+(((0.41)*sj12))+(((-1.0)*py*x1384)));
evalcond[4]=((-0.0114)+((sj13*x1377))+((sj13*x1381))+((cj13*x1388))+(((-1.0)*x1380*x1385))+((x1379*x1386))+((x1379*x1387)));
evalcond[5]=((((-1.0)*cj13*x1381))+(((-1.0)*x1377*x1380))+(((-1.0)*x1376))+((sj13*x1388))+(((-1.0)*sj13*x1385))+(((-1.0)*cj12*x1380*x1387))+(((-1.0)*cj12*x1380*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
IkReal x1390=((1.0)*(x1392.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1393.valid){
continue;
}
if( (((x1393.value)*(((((0.0114)*cj13))+(((0.31105)*sj13*sj14)))))) < -1-IKFAST_SINCOS_THRESH || (((x1393.value)*(((((0.0114)*cj13))+(((0.31105)*sj13*sj14)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1391=IKasin(((x1393.value)*(((((0.0114)*cj13))+(((0.31105)*sj13*sj14))))));
j11array[0]=((((-1.0)*x1391))+(((-1.0)*x1390)));
sj11array[0]=IKsin(j11array[0]);
cj11array[0]=IKcos(j11array[0]);
j11array[1]=((3.14159265358979)+x1391+(((-1.0)*x1390)));
sj11array[1]=IKsin(j11array[1]);
cj11array[1]=IKcos(j11array[1]);
if( j11array[0] > IKPI )
{
    j11array[0]-=IK2PI;
}
else if( j11array[0] < -IKPI )
{    j11array[0]+=IK2PI;
}
j11valid[0] = true;
if( j11array[1] > IKPI )
{
    j11array[1]-=IK2PI;
}
else if( j11array[1] < -IKPI )
{    j11array[1]+=IK2PI;
}
j11valid[1] = true;
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j12eval[2];
IkReal x1394=(pz*sj13);
IkReal x1395=(cj13*sj14);
IkReal x1396=(py*sj11);
IkReal x1397=(cj11*px);
IkReal x1398=((229.769159741459)*cj14);
IkReal x1399=((0.31105)*cj14);
j12eval[0]=((((-302.86241920591)*x1396))+(((-302.86241920591)*x1397))+(((8.42105263157895)*x1394))+(((-1.0)*x1397*x1398))+(((-1.0)*x1396*x1398))+sj13+(((-27.2850877192982)*x1395))+(((-229.769159741459)*pz*x1395)));
j12eval[1]=IKsign(((((0.0114)*x1394))+(((-1.0)*x1397*x1399))+(((-1.0)*x1396*x1399))+(((-0.41)*x1396))+(((-0.41)*x1397))+(((-0.31105)*pz*x1395))+(((-0.0369371875)*x1395))+(((0.00135375)*sj13))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x1400=cj13*cj13;
IkReal x1401=cj14*cj14;
IkReal x1402=(cj13*sj13*sj14);
IkReal x1403=((13.6425438596491)*x1401);
IkReal x1404=((0.0967521025)*x1401);
j12eval[0]=((-23.7212892382056)+(((-35.9649122807018)*cj14))+(((-13.6242188315186)*x1400))+(((-1.0)*x1403))+x1402+((x1400*x1403)));
j12eval[1]=IKsign(((-0.16822996)+(((-0.255061)*cj14))+(((0.00709194)*x1402))+(((-1.0)*x1404))+(((-0.0966221425)*x1400))+((x1400*x1404))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x1405=(py*sj11);
IkReal x1406=((0.0114)*sj13);
IkReal x1407=(cj13*sj14);
IkReal x1408=(cj14*pz);
IkReal x1409=(cj11*px);
j12eval[0]=((4.27083333333333)+(((-27.2850877192982)*x1405*x1407))+(((-27.2850877192982)*x1407*x1409))+(((3.24010416666667)*cj14))+(((27.2850877192982)*x1408))+(((35.9649122807018)*pz))+((sj13*x1409))+((sj13*x1405)));
j12eval[1]=IKsign(((0.0486875)+(((0.31105)*x1408))+(((-0.31105)*x1405*x1407))+((x1405*x1406))+(((0.41)*pz))+((x1406*x1409))+(((0.0369371875)*cj14))+(((-0.31105)*x1407*x1409))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1410=cj11*cj11;
IkReal x1411=py*py;
IkReal x1412=(py*sj11);
IkReal x1413=((0.0114)*sj13);
IkReal x1414=(cj11*px);
IkReal x1415=(cj13*sj14);
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal((((pz*x1414))+((pz*x1412))+(((0.11875)*x1412))+(((0.11875)*x1414))+(((-0.0967521025)*cj14*x1415))+(((0.00354597)*cj14*sj13))+(((0.004674)*sj13))+(((-0.1275305)*x1415)))),IkReal(((-0.1681)+(((-0.255061)*cj14))+(((2.0)*x1412*x1414))+(((-1.0)*x1410*x1411))+(((-0.0967521025)*(cj14*cj14)))+x1411+((x1410*(px*px))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
CheckValue<IkReal> x1417=IKPowWithIntegerCheck(IKsign(((0.0486875)+((x1413*x1414))+((x1412*x1413))+(((0.31105)*cj14*pz))+(((-0.31105)*x1412*x1415))+(((0.41)*pz))+(((0.0369371875)*cj14))+(((-0.31105)*x1414*x1415)))),-1);
if(!x1417.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1416.value)+(((1.5707963267949)*(x1417.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1418=IKcos(j12);
IkReal x1419=IKsin(j12);
IkReal x1420=((1.0)*pz);
IkReal x1421=((0.0114)*sj13);
IkReal x1422=((0.31105)*sj14);
IkReal x1423=((0.31105)*cj14);
IkReal x1424=(px*sj11);
IkReal x1425=(py*sj11);
IkReal x1426=(cj13*x1419);
IkReal x1427=((1.0)*cj11*py);
IkReal x1428=((1.0)*x1425);
IkReal x1429=(cj13*x1418);
IkReal x1430=((1.0)*cj11*px);
IkReal x1431=(sj13*x1419);
IkReal x1432=(pz*x1418);
IkReal x1433=(sj13*x1418);
IkReal x1434=(cj11*px*x1419);
evalcond[0]=((0.41)+(((-1.0)*x1419*x1430))+(((0.11875)*x1418))+(((-1.0)*x1419*x1428))+x1423+x1432);
evalcond[1]=((-0.11875)+(((-0.41)*x1418))+(((-1.0)*x1418*x1423))+(((-1.0)*x1422*x1426))+((x1419*x1421))+(((-1.0)*x1420)));
evalcond[2]=((-0.0853195)+(((-0.82)*x1432))+(((-0.2375)*pz))+(((0.82)*x1434))+(((-1.0)*pp))+(((-0.097375)*x1418))+(((0.82)*x1419*x1425)));
evalcond[3]=((((-1.0)*x1430))+(((-1.0)*x1422*x1429))+((x1419*x1423))+((x1418*x1421))+(((0.41)*x1419))+(((-1.0)*x1428)));
evalcond[4]=((-0.0114)+(((0.11875)*x1431))+(((-1.0)*cj13*x1427))+((x1425*x1433))+((pz*x1431))+((cj11*px*x1433))+((cj13*x1424)));
evalcond[5]=((((-0.11875)*x1426))+(((-1.0)*x1429*x1430))+(((-1.0)*x1420*x1426))+((sj13*x1424))+(((-1.0)*sj13*x1427))+(((-1.0)*x1428*x1429))+(((-1.0)*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1435=cj14*cj14;
IkReal x1436=cj13*cj13;
IkReal x1437=(py*sj11);
IkReal x1438=((0.0114)*sj13);
IkReal x1439=(cj13*sj14);
IkReal x1440=((0.31105)*cj14);
IkReal x1441=(cj11*px);
IkReal x1442=((0.0967521025)*x1435);
CheckValue<IkReal> x1443 = IKatan2WithCheck(IkReal(((((0.31105)*pz*x1439))+(((-0.41)*x1437))+(((-1.0)*x1437*x1440))+(((-0.00135375)*sj13))+(((-0.41)*x1441))+(((-1.0)*x1440*x1441))+(((-1.0)*pz*x1438))+(((0.0369371875)*x1439)))),IkReal(((0.0486875)+(((-1.0)*x1437*x1438))+(((-1.0)*x1438*x1441))+(((0.31105)*x1437*x1439))+(((0.31105)*x1439*x1441))+(((0.41)*pz))+((pz*x1440))+(((0.0369371875)*cj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1443.valid){
continue;
}
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(IKsign(((-0.16822996)+(((-0.255061)*cj14))+((x1436*x1442))+(((0.00709194)*sj13*x1439))+(((-0.0966221425)*x1436))+(((-1.0)*x1442)))),-1);
if(!x1444.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1443.value)+(((1.5707963267949)*(x1444.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1445=IKcos(j12);
IkReal x1446=IKsin(j12);
IkReal x1447=((1.0)*pz);
IkReal x1448=((0.0114)*sj13);
IkReal x1449=((0.31105)*sj14);
IkReal x1450=((0.31105)*cj14);
IkReal x1451=(px*sj11);
IkReal x1452=(py*sj11);
IkReal x1453=(cj13*x1446);
IkReal x1454=((1.0)*cj11*py);
IkReal x1455=((1.0)*x1452);
IkReal x1456=(cj13*x1445);
IkReal x1457=((1.0)*cj11*px);
IkReal x1458=(sj13*x1446);
IkReal x1459=(pz*x1445);
IkReal x1460=(sj13*x1445);
IkReal x1461=(cj11*px*x1446);
evalcond[0]=((0.41)+(((-1.0)*x1446*x1457))+(((-1.0)*x1446*x1455))+x1450+x1459+(((0.11875)*x1445)));
evalcond[1]=((-0.11875)+(((-1.0)*x1445*x1450))+(((-1.0)*x1447))+(((-1.0)*x1449*x1453))+(((-0.41)*x1445))+((x1446*x1448)));
evalcond[2]=((-0.0853195)+(((0.82)*x1461))+(((-0.097375)*x1445))+(((-0.82)*x1459))+(((-0.2375)*pz))+(((-1.0)*pp))+(((0.82)*x1446*x1452)));
evalcond[3]=(((x1445*x1448))+(((0.41)*x1446))+((x1446*x1450))+(((-1.0)*x1457))+(((-1.0)*x1455))+(((-1.0)*x1449*x1456)));
evalcond[4]=((-0.0114)+((x1452*x1460))+(((0.11875)*x1458))+((pz*x1458))+((cj13*x1451))+((cj11*px*x1460))+(((-1.0)*cj13*x1454)));
evalcond[5]=((((-1.0)*x1447*x1453))+(((-1.0)*x1455*x1456))+(((-0.11875)*x1453))+(((-1.0)*sj13*x1454))+(((-1.0)*x1449))+((sj13*x1451))+(((-1.0)*x1456*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1462=(cj11*px);
IkReal x1463=(py*sj11);
IkReal x1464=(cj13*sj14);
IkReal x1465=((0.31105)*cj14);
CheckValue<IkReal> x1466=IKPowWithIntegerCheck(IKsign(((((-0.31105)*pz*x1464))+(((-1.0)*x1462*x1465))+(((-1.0)*x1463*x1465))+(((-0.41)*x1462))+(((-0.41)*x1463))+(((0.00135375)*sj13))+(((-0.0369371875)*x1464))+(((0.0114)*pz*sj13)))),-1);
if(!x1466.valid){
continue;
}
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal(((-0.1539984375)+(((-0.255061)*cj14))+(((0.2375)*pz))+(pz*pz)+(((-0.0967521025)*(cj14*cj14))))),IkReal((((pz*x1462))+((pz*x1463))+(((-0.004674)*sj13))+(((0.11875)*x1462))+(((0.11875)*x1463))+(((0.1275305)*x1464))+(((0.0967521025)*cj14*x1464))+(((-0.00354597)*cj14*sj13)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1466.value)))+(x1467.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1468=IKcos(j12);
IkReal x1469=IKsin(j12);
IkReal x1470=((1.0)*pz);
IkReal x1471=((0.0114)*sj13);
IkReal x1472=((0.31105)*sj14);
IkReal x1473=((0.31105)*cj14);
IkReal x1474=(px*sj11);
IkReal x1475=(py*sj11);
IkReal x1476=(cj13*x1469);
IkReal x1477=((1.0)*cj11*py);
IkReal x1478=((1.0)*x1475);
IkReal x1479=(cj13*x1468);
IkReal x1480=((1.0)*cj11*px);
IkReal x1481=(sj13*x1469);
IkReal x1482=(pz*x1468);
IkReal x1483=(sj13*x1468);
IkReal x1484=(cj11*px*x1469);
evalcond[0]=((0.41)+(((-1.0)*x1469*x1480))+(((0.11875)*x1468))+(((-1.0)*x1469*x1478))+x1473+x1482);
evalcond[1]=((-0.11875)+(((-0.41)*x1468))+(((-1.0)*x1468*x1473))+(((-1.0)*x1470))+(((-1.0)*x1472*x1476))+((x1469*x1471)));
evalcond[2]=((-0.0853195)+(((-0.82)*x1482))+(((-0.2375)*pz))+(((0.82)*x1484))+(((-1.0)*pp))+(((0.82)*x1469*x1475))+(((-0.097375)*x1468)));
evalcond[3]=((((-1.0)*x1480))+(((0.41)*x1469))+(((-1.0)*x1478))+((x1468*x1471))+(((-1.0)*x1472*x1479))+((x1469*x1473)));
evalcond[4]=((-0.0114)+(((-1.0)*cj13*x1477))+((pz*x1481))+(((0.11875)*x1481))+((cj11*px*x1483))+((cj13*x1474))+((x1475*x1483)));
evalcond[5]=((((-1.0)*x1478*x1479))+(((-1.0)*x1479*x1480))+(((-1.0)*sj13*x1477))+(((-1.0)*x1470*x1476))+((sj13*x1474))+(((-1.0)*x1472))+(((-0.11875)*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x139=((1.0)*sj11);
IkReal x140=(cj14*sj13);
IkReal x141=(cj12*sj14);
IkReal x142=(cj12*cj14);
IkReal x143=((1.0)*sj12);
IkReal x144=(sj13*sj14);
IkReal x145=(cj13*sj12);
IkReal x146=(cj12*sj13);
IkReal x147=(((cj13*x142))+((sj12*sj14)));
IkReal x148=(((cj14*x145))+(((-1.0)*x141)));
IkReal x149=(((cj11*cj13))+(((-1.0)*x139*x146)));
IkReal x150=(((cj13*x141))+(((-1.0)*cj14*x143)));
IkReal x151=(x142+((sj14*x145)));
IkReal x152=(cj11*x150);
IkReal x153=((((-1.0)*cj13*x139))+(((-1.0)*cj11*x146)));
IkReal x154=(((cj11*x140))+((sj11*x147)));
IkReal x155=(((cj11*x147))+(((-1.0)*x139*x140)));
IkReal x156=(((cj11*x144))+((sj11*x150)));
IkReal x157=((((-1.0)*x139*x144))+x152);
new_r00=(((r20*x148))+((r00*x155))+((r10*x154)));
new_r01=(((r01*x155))+((r21*x148))+((r11*x154)));
new_r02=(((r02*x155))+((r22*x148))+((r12*x154)));
new_r10=((((-1.0)*r20*sj13*x143))+((r00*x153))+((r10*x149)));
new_r11=(((r01*x153))+(((-1.0)*r21*sj13*x143))+((r11*x149)));
new_r12=((((-1.0)*r22*sj13*x143))+((r02*x153))+((r12*x149)));
new_r20=(((r20*x151))+((r00*((x152+(((-1.0)*sj11*x144))))))+((r10*x156)));
new_r21=(((r01*x157))+((r21*x151))+((r11*x156)));
new_r22=(((r22*x151))+((r02*x157))+((r12*x156)));
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
cj16array[0]=new_r22;
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
j15eval[0]=sj16;
j15eval[1]=IKsign(sj16);
j15eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=new_r12;
j15eval[1]=sj16;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j17mul = 1;
j17=0;
j15mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].fmul = j15mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].fmul = j17mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j17mul = 1;
j17=0;
j15mul=1.0;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15=IKatan2(new_r10, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].fmul = j15mul;
vinfos[5].freeind = 0;
vinfos[5].maxsolutions = 0;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].fmul = j17mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 7;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x158=new_r22*new_r22;
IkReal x159=((16.0)*new_r10);
IkReal x160=((16.0)*new_r01);
IkReal x161=((16.0)*new_r22);
IkReal x162=((8.0)*new_r11);
IkReal x163=((8.0)*new_r00);
IkReal x164=(x158*x159);
IkReal x165=(x158*x160);
j15eval[0]=((IKabs(((((-1.0)*new_r22*x163))+((x158*x162)))))+(IKabs(((((-32.0)*new_r00*x158))+((new_r11*x161))+(((16.0)*new_r00)))))+(IKabs(((((-1.0)*x163))+((new_r22*x162)))))+(IKabs(((((-1.0)*new_r00*x161))+(((32.0)*new_r11))+(((-16.0)*new_r11*x158)))))+(IKabs(((((-1.0)*x160))+x165)))+(IKabs(((((-1.0)*x159))+x164)))+(IKabs(((((-1.0)*x165))+x160)))+(IKabs(((((-1.0)*x164))+x159))));
if( IKabs(j15eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j15, j17]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j15evalpoly[1];
IkReal x166=new_r22*new_r22;
IkReal x167=((16.0)*new_r10);
IkReal x168=(new_r11*new_r22);
IkReal x169=(x166*x167);
IkReal x170=((((8.0)*x168))+(((-8.0)*new_r00)));
op[0]=x170;
op[1]=((((-1.0)*x169))+x167);
op[2]=((((-32.0)*new_r00*x166))+(((16.0)*new_r00))+(((16.0)*x168)));
op[3]=((((-1.0)*x167))+x169);
op[4]=x170;
polyroots4(op,zeror,numroots);
IkReal j15array[4], cj15array[4], sj15array[4], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[4]={true,true,true,true};
_nj15 = 4;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x171=new_r22*new_r22;
IkReal x172=((16.0)*new_r01);
IkReal x173=(new_r00*new_r22);
IkReal x174=((8.0)*x173);
IkReal x175=(new_r11*x171);
IkReal x176=(x171*x172);
IkReal x177=((8.0)*x175);
j15evalpoly[0]=(((htj15*(((((-1.0)*x176))+x172))))+(((htj15*htj15*htj15*htj15)*(((((-1.0)*x174))+x177))))+(((htj15*htj15*htj15)*(((((-1.0)*x172))+x176))))+(((-1.0)*x174))+x177+(((htj15*htj15)*(((((32.0)*new_r11))+(((-16.0)*x173))+(((-16.0)*x175)))))));
if( IKabs(j15evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j17eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x178=cj15*cj15;
IkReal x179=new_r22*new_r22;
IkReal x180=(new_r22*sj15);
IkReal x181=((1.0)*cj15);
IkReal x182=(x179+x178+(((-1.0)*x178*x179)));
j17eval[0]=x182;
j17eval[1]=((IKabs((((new_r11*x180))+(((-1.0)*new_r10*x181)))))+(IKabs(((((-1.0)*new_r11*x181))+(((-1.0)*new_r10*x180))))));
j17eval[2]=IKsign(x182);
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=new_r22;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=cj15;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x183=IKsin(j17);
IkReal x184=IKcos(j17);
evalcond[0]=x183;
evalcond[1]=((-1.0)*x184);
evalcond[2]=(x183+(((-1.0)*new_r00)));
evalcond[3]=(x184+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[4];
IkReal x185=IKsin(j17);
IkReal x186=IKcos(j17);
evalcond[0]=x185;
evalcond[1]=(x185+new_r00);
evalcond[2]=(x186+new_r01);
evalcond[3]=((-1.0)*x186);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x187=new_r22*new_r22;
CheckValue<IkReal> x188=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x187))),-1);
if(!x188.valid){
continue;
}
if((((-1.0)*x187*(x188.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x187*(x188.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj15+(((-1.0)*gconst12)))))+(IKabs(((-1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
IkReal x189=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj15=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
cj15=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=IKacos(gconst12);
CheckValue<IkReal> x190=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x189))),-1);
if(!x190.valid){
continue;
}
if((((-1.0)*x189*(x190.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x189*(x190.value)));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x191=IKPowWithIntegerCheck(gconst12,-1);
if(!x191.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x191.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x191.value)))+IKsqr((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10*(x191.value)), (((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x192=IKsin(j17);
IkReal x193=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x194=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x195=((1.0)*x194);
evalcond[0]=x192;
evalcond[1]=((-1.0)*x193);
evalcond[2]=(((gconst12*x192))+new_r10);
evalcond[3]=(((gconst12*x193))+new_r11);
evalcond[4]=((((-1.0)*x192*x195))+new_r00);
evalcond[5]=(new_r01+(((-1.0)*x193*x195)));
evalcond[6]=(x192+(((-1.0)*new_r00*x195))+((gconst12*new_r10)));
evalcond[7]=(x193+(((-1.0)*new_r01*x195))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x196 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x196.valid){
continue;
}
CheckValue<IkReal> x197=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x197.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x196.value)+(((1.5707963267949)*(x197.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x198=IKsin(j17);
IkReal x199=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x200=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x201=((1.0)*x200);
evalcond[0]=x198;
evalcond[1]=((-1.0)*x199);
evalcond[2]=(((gconst12*x198))+new_r10);
evalcond[3]=(((gconst12*x199))+new_r11);
evalcond[4]=((((-1.0)*x198*x201))+new_r00);
evalcond[5]=((((-1.0)*x199*x201))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x201))+x198+((gconst12*new_r10)));
evalcond[7]=(x199+(((-1.0)*new_r01*x201))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x202=new_r22*new_r22;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x202))),-1);
if(!x203.valid){
continue;
}
if((((-1.0)*x202*(x203.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x202*(x203.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj15+(((-1.0)*gconst12)))))+(IKabs(((1.0)+(IKsign(sj15)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
IkReal x204=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj15=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))))));
cj15=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=((-1.0)*(IKacos(gconst12)));
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x204))),-1);
if(!x205.valid){
continue;
}
if((((-1.0)*x204*(x205.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x204*(x205.value)));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x206=IKPowWithIntegerCheck(gconst12,-1);
if(!x206.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x206.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x206.value)))+IKsqr(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10*(x206.value)), ((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x207=IKsin(j17);
IkReal x208=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x209=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
evalcond[0]=x207;
evalcond[1]=((-1.0)*x208);
evalcond[2]=(((gconst12*x207))+new_r10);
evalcond[3]=(((gconst12*x208))+new_r11);
evalcond[4]=(new_r00+((x207*x209)));
evalcond[5]=(new_r01+((x208*x209)));
evalcond[6]=(((new_r00*x209))+x207+((gconst12*new_r10)));
evalcond[7]=(((new_r01*x209))+x208+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
CheckValue<IkReal> x211=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x211.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x210.value)+(((1.5707963267949)*(x211.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x212=IKsin(j17);
IkReal x213=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x214=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
evalcond[0]=x212;
evalcond[1]=((-1.0)*x213);
evalcond[2]=(new_r10+((gconst12*x212)));
evalcond[3]=(new_r11+((gconst12*x213)));
evalcond[4]=(((x212*x214))+new_r00);
evalcond[5]=(((x213*x214))+new_r01);
evalcond[6]=(x212+((new_r00*x214))+((gconst12*new_r10)));
evalcond[7]=(x213+((new_r01*x214))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x215=new_r22*new_r22;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x215))),-1);
if(!x216.valid){
continue;
}
if((((-1.0)*x215*(x216.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x215*(x216.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj15)))))+(IKabs((cj15+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
IkReal x217=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj15=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
cj15=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=IKacos(gconst13);
CheckValue<IkReal> x218=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x217))),-1);
if(!x218.valid){
continue;
}
if((((-1.0)*x217*(x218.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x217*(x218.value)))));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x219=IKPowWithIntegerCheck(gconst13,-1);
if(!x219.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x219.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst13*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x219.value)))+IKsqr(((((-1.0)*gconst13*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10*(x219.value)), ((((-1.0)*gconst13*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x220=IKsin(j17);
IkReal x221=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x222=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x223=((1.0)*x222);
evalcond[0]=x220;
evalcond[1]=((-1.0)*x221);
evalcond[2]=(((gconst13*x220))+new_r10);
evalcond[3]=(((gconst13*x221))+new_r11);
evalcond[4]=((((-1.0)*x220*x223))+new_r00);
evalcond[5]=((((-1.0)*x221*x223))+new_r01);
evalcond[6]=(x220+((gconst13*new_r10))+(((-1.0)*new_r00*x223)));
evalcond[7]=((((-1.0)*new_r01*x223))+x221+((gconst13*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x224 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x224.valid){
continue;
}
CheckValue<IkReal> x225=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x225.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x224.value)+(((1.5707963267949)*(x225.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x226=IKsin(j17);
IkReal x227=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x228=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x229=((1.0)*x228);
evalcond[0]=x226;
evalcond[1]=((-1.0)*x227);
evalcond[2]=(((gconst13*x226))+new_r10);
evalcond[3]=(((gconst13*x227))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*x226*x229)));
evalcond[5]=((((-1.0)*x227*x229))+new_r01);
evalcond[6]=(x226+((gconst13*new_r10))+(((-1.0)*new_r00*x229)));
evalcond[7]=((((-1.0)*new_r01*x229))+x227+((gconst13*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x230=new_r22*new_r22;
CheckValue<IkReal> x231=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x230))),-1);
if(!x231.valid){
continue;
}
if((((-1.0)*x230*(x231.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x230*(x231.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj15)))))+(IKabs((cj15+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
IkReal x232=new_r22*new_r22;
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj15=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))));
cj15=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j15=((-1.0)*(IKacos(gconst13)));
CheckValue<IkReal> x233=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x232))),-1);
if(!x233.valid){
continue;
}
if((((-1.0)*x232*(x233.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x232*(x233.value)))));
j17eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x234=IKPowWithIntegerCheck(gconst13,-1);
if(!x234.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x234.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x234.value)))+IKsqr(((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10*(x234.value)), ((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x235=IKsin(j17);
IkReal x236=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x237=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
evalcond[0]=x235;
evalcond[1]=((-1.0)*x236);
evalcond[2]=(((gconst13*x235))+new_r10);
evalcond[3]=(((gconst13*x236))+new_r11);
evalcond[4]=(((x235*x237))+new_r00);
evalcond[5]=(new_r01+((x236*x237)));
evalcond[6]=(((new_r00*x237))+x235+((gconst13*new_r10)));
evalcond[7]=(((new_r01*x237))+x236+((gconst13*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x238 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x238.valid){
continue;
}
CheckValue<IkReal> x239=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x239.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x238.value)+(((1.5707963267949)*(x239.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x240=IKsin(j17);
IkReal x241=IKcos(j17);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x242=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
evalcond[0]=x240;
evalcond[1]=((-1.0)*x241);
evalcond[2]=(((gconst13*x240))+new_r10);
evalcond[3]=(((gconst13*x241))+new_r11);
evalcond[4]=(((x240*x242))+new_r00);
evalcond[5]=(((x241*x242))+new_r01);
evalcond[6]=(x240+((new_r00*x242))+((gconst13*new_r10)));
evalcond[7]=(x241+((new_r01*x242))+((gconst13*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x243=(new_r01*new_r22);
IkReal x244=(cj15*new_r11);
CheckValue<IkReal> x245=IKPowWithIntegerCheck(cj15,-1);
if(!x245.valid){
continue;
}
if( IKabs(((x245.value)*(((((-1.0)*x243))+((x243*(cj15*cj15)))+((new_r22*sj15*x244))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x244))+((new_r01*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x245.value)*(((((-1.0)*x243))+((x243*(cj15*cj15)))+((new_r22*sj15*x244))+(((-1.0)*new_r10))))))+IKsqr(((((-1.0)*x244))+((new_r01*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x245.value)*(((((-1.0)*x243))+((x243*(cj15*cj15)))+((new_r22*sj15*x244))+(((-1.0)*new_r10))))), ((((-1.0)*x244))+((new_r01*sj15))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x246=IKcos(j17);
IkReal x247=IKsin(j17);
IkReal x248=((1.0)*new_r01);
IkReal x249=(cj15*new_r22);
IkReal x250=(new_r22*sj15);
IkReal x251=((1.0)*new_r00);
IkReal x252=((1.0)*x247);
IkReal x253=((1.0)*x246);
evalcond[0]=(((cj15*new_r10))+x247+(((-1.0)*sj15*x251)));
evalcond[1]=(((cj15*new_r11))+x246+(((-1.0)*sj15*x248)));
evalcond[2]=(((new_r22*x246))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[3]=(((x246*x250))+((cj15*x247))+new_r10);
evalcond[4]=(((cj15*new_r01))+(((-1.0)*new_r22*x252))+((new_r11*sj15)));
evalcond[5]=(new_r00+((x246*x249))+(((-1.0)*sj15*x252)));
evalcond[6]=((((-1.0)*x250*x252))+((cj15*x246))+new_r11);
evalcond[7]=((((-1.0)*x248*x249))+(((-1.0)*new_r11*x250))+x247);
evalcond[8]=((((-1.0)*x249*x252))+new_r01+(((-1.0)*sj15*x253)));
evalcond[9]=((((-1.0)*new_r10*x250))+(((-1.0)*x249*x251))+(((-1.0)*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x254=((1.0)*cj15);
CheckValue<IkReal> x255=IKPowWithIntegerCheck(new_r22,-1);
if(!x255.valid){
continue;
}
if( IKabs(((((-1.0)*new_r10*x254))+((new_r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x255.value)*(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x254)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x254))+((new_r00*sj15))))+IKsqr(((x255.value)*(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x254))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r10*x254))+((new_r00*sj15))), ((x255.value)*(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x254))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x256=IKcos(j17);
IkReal x257=IKsin(j17);
IkReal x258=((1.0)*new_r01);
IkReal x259=(cj15*new_r22);
IkReal x260=(new_r22*sj15);
IkReal x261=((1.0)*new_r00);
IkReal x262=((1.0)*x257);
IkReal x263=((1.0)*x256);
evalcond[0]=(((cj15*new_r10))+x257+(((-1.0)*sj15*x261)));
evalcond[1]=(((cj15*new_r11))+x256+(((-1.0)*sj15*x258)));
evalcond[2]=(((cj15*new_r00))+((new_r22*x256))+((new_r10*sj15)));
evalcond[3]=(((cj15*x257))+((x256*x260))+new_r10);
evalcond[4]=((((-1.0)*new_r22*x262))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[5]=(((x256*x259))+(((-1.0)*sj15*x262))+new_r00);
evalcond[6]=(((cj15*x256))+new_r11+(((-1.0)*x260*x262)));
evalcond[7]=(x257+(((-1.0)*new_r11*x260))+(((-1.0)*x258*x259)));
evalcond[8]=((((-1.0)*x259*x262))+(((-1.0)*sj15*x263))+new_r01);
evalcond[9]=((((-1.0)*x259*x261))+(((-1.0)*new_r10*x260))+(((-1.0)*x263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x264=cj15*cj15;
IkReal x265=new_r22*new_r22;
IkReal x266=((1.0)*cj15);
IkReal x267=(new_r22*sj15);
CheckValue<IkReal> x268 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x266))+((new_r11*x267)))),IkReal(((((-1.0)*new_r10*x267))+(((-1.0)*new_r11*x266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x268.valid){
continue;
}
CheckValue<IkReal> x269=IKPowWithIntegerCheck(IKsign((x265+x264+(((-1.0)*x264*x265)))),-1);
if(!x269.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x268.value)+(((1.5707963267949)*(x269.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[10];
IkReal x270=IKcos(j17);
IkReal x271=IKsin(j17);
IkReal x272=((1.0)*new_r01);
IkReal x273=(cj15*new_r22);
IkReal x274=(new_r22*sj15);
IkReal x275=((1.0)*new_r00);
IkReal x276=((1.0)*x271);
IkReal x277=((1.0)*x270);
evalcond[0]=(((cj15*new_r10))+x271+(((-1.0)*sj15*x275)));
evalcond[1]=(((cj15*new_r11))+x270+(((-1.0)*sj15*x272)));
evalcond[2]=(((new_r22*x270))+((cj15*new_r00))+((new_r10*sj15)));
evalcond[3]=(((cj15*x271))+((x270*x274))+new_r10);
evalcond[4]=((((-1.0)*new_r22*x276))+((cj15*new_r01))+((new_r11*sj15)));
evalcond[5]=(((x270*x273))+(((-1.0)*sj15*x276))+new_r00);
evalcond[6]=((((-1.0)*x274*x276))+((cj15*x270))+new_r11);
evalcond[7]=((((-1.0)*x272*x273))+x271+(((-1.0)*new_r11*x274)));
evalcond[8]=((((-1.0)*x273*x276))+(((-1.0)*sj15*x277))+new_r01);
evalcond[9]=((((-1.0)*x273*x275))+(((-1.0)*new_r10*x274))+(((-1.0)*x277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15, j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x279=IKPowWithIntegerCheck(sj16,-1);
if(!x279.valid){
continue;
}
IkReal x278=x279.value;
CheckValue<IkReal> x280=IKPowWithIntegerCheck(new_r12,-1);
if(!x280.valid){
continue;
}
if( IKabs((x278*(x280.value)*(((-1.0)+(new_r02*new_r02)+(cj16*cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x278)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x278*(x280.value)*(((-1.0)+(new_r02*new_r02)+(cj16*cj16)))))+IKsqr(((-1.0)*new_r02*x278))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x278*(x280.value)*(((-1.0)+(new_r02*new_r02)+(cj16*cj16)))), ((-1.0)*new_r02*x278));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x281=IKcos(j15);
IkReal x282=IKsin(j15);
IkReal x283=((1.0)*cj16);
IkReal x284=(new_r02*x281);
IkReal x285=(sj16*x281);
IkReal x286=(sj16*x282);
IkReal x287=(new_r12*x282);
evalcond[0]=(x285+new_r02);
evalcond[1]=(x286+new_r12);
evalcond[2]=(((new_r12*x281))+(((-1.0)*new_r02*x282)));
evalcond[3]=(x287+x284+sj16);
evalcond[4]=((((-1.0)*new_r20*x283))+((new_r00*x285))+((new_r10*x286)));
evalcond[5]=((((-1.0)*new_r21*x283))+((new_r11*x286))+((new_r01*x285)));
evalcond[6]=((1.0)+(((-1.0)*new_r22*x283))+((new_r12*x286))+((sj16*x284)));
evalcond[7]=((((-1.0)*new_r22*sj16))+(((-1.0)*x283*x284))+(((-1.0)*x283*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=cj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=sj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x288=IKsin(j17);
IkReal x289=IKcos(j17);
CheckValue<IkReal> x294=IKPowWithIntegerCheck(new_r02,-1);
if(!x294.valid){
continue;
}
IkReal x290=x294.value;
IkReal x291=new_r22*new_r22;
IkReal x292=(x290*x291);
IkReal x293=((1.0)*x289);
evalcond[0]=(x288+new_r10);
evalcond[1]=(x289+new_r11);
evalcond[2]=(((new_r02*x288))+new_r21);
evalcond[3]=(((cj16*x289))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*new_r02*x293)));
evalcond[5]=((((-1.0)*cj16*x288))+new_r01);
evalcond[6]=(x288+((new_r21*x292))+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x292))+(((-1.0)*x293))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x295=IKcos(j17);
IkReal x296=IKsin(j17);
IkReal x297=((1.0)*sj16);
IkReal x298=((1.0)*x296);
evalcond[0]=(((new_r02*x295))+new_r20);
evalcond[1]=(x296+(((-1.0)*new_r10)));
evalcond[2]=(x295+(((-1.0)*new_r11)));
evalcond[3]=(new_r21+(((-1.0)*new_r02*x298)));
evalcond[4]=((((-1.0)*new_r00))+((cj16*x295)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*cj16*x298)));
evalcond[6]=((((-1.0)*new_r21*x297))+x296+((cj16*new_r01)));
evalcond[7]=((((-1.0)*x295))+(((-1.0)*new_r20*x297))+((cj16*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x299=((1.0)*cj15);
if( IKabs(((((-1.0)*new_r10*x299))+((new_r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x299))+((new_r00*sj15))))+IKsqr(((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r10*x299))+((new_r00*sj15))), ((((-1.0)*new_r10*sj15))+(((-1.0)*new_r00*x299))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x300=IKcos(j17);
IkReal x301=IKsin(j17);
IkReal x302=((1.0)*sj15);
IkReal x303=(cj15*x300);
IkReal x304=((1.0)*x301);
IkReal x305=(x301*x302);
evalcond[0]=(x300+((cj15*new_r00))+((new_r10*sj15)));
evalcond[1]=(((cj15*new_r10))+x301+(((-1.0)*new_r00*x302)));
evalcond[2]=(((cj15*new_r11))+x300+(((-1.0)*new_r01*x302)));
evalcond[3]=(((sj15*x300))+new_r10+((cj15*x301)));
evalcond[4]=(((cj15*new_r01))+((new_r11*sj15))+(((-1.0)*x304)));
evalcond[5]=(x303+new_r00+(((-1.0)*x305)));
evalcond[6]=(x303+new_r11+(((-1.0)*x305)));
evalcond[7]=(new_r01+(((-1.0)*cj15*x304))+(((-1.0)*x300*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x306=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj15*new_r10))+(((-1.0)*sj15*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj15))+(((-1.0)*cj15*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*new_r10))+(((-1.0)*sj15*x306))))+IKsqr((((new_r10*sj15))+(((-1.0)*cj15*x306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*cj15*new_r10))+(((-1.0)*sj15*x306))), (((new_r10*sj15))+(((-1.0)*cj15*x306))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x307=IKsin(j17);
IkReal x308=IKcos(j17);
IkReal x309=((1.0)*sj15);
IkReal x310=(cj15*x307);
IkReal x311=((1.0)*x308);
IkReal x312=(x308*x309);
evalcond[0]=(x307+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=(((cj15*new_r10))+x307+(((-1.0)*new_r00*x309)));
evalcond[2]=(((cj15*new_r11))+x308+(((-1.0)*new_r01*x309)));
evalcond[3]=(((cj15*new_r00))+(((-1.0)*x311))+((new_r10*sj15)));
evalcond[4]=(((sj15*x307))+new_r11+((cj15*x308)));
evalcond[5]=(x310+(((-1.0)*x312))+new_r10);
evalcond[6]=(x310+(((-1.0)*x312))+new_r01);
evalcond[7]=((((-1.0)*x307*x309))+new_r00+(((-1.0)*cj15*x311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x313=IKcos(j17);
IkReal x314=IKsin(j17);
IkReal x315=((1.0)*cj16);
IkReal x316=((1.0)*sj16);
IkReal x317=((1.0)*x313);
evalcond[0]=(x314+(((-1.0)*new_r00)));
evalcond[1]=(x313+(((-1.0)*new_r01)));
evalcond[2]=(((cj16*x313))+new_r10);
evalcond[3]=((((-1.0)*new_r12*x317))+new_r20);
evalcond[4]=((((-1.0)*x314*x316))+new_r21);
evalcond[5]=((((-1.0)*x314*x315))+new_r11);
evalcond[6]=((((-1.0)*new_r21*x316))+(((-1.0)*new_r11*x315))+x314);
CheckValue<IkReal> x318=IKPowWithIntegerCheck(new_r12,-1);
if(!x318.valid){
continue;
}
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x317))+((new_r20*(x318.value)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x319=IKcos(j17);
IkReal x320=IKsin(j17);
IkReal x321=((1.0)*sj16);
evalcond[0]=(x320+new_r00);
evalcond[1]=(x319+new_r01);
evalcond[2]=(((new_r12*x319))+new_r20);
evalcond[3]=((((-1.0)*x320*x321))+new_r21);
evalcond[4]=(((cj16*x319))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*cj16*x320))+(((-1.0)*new_r11)));
evalcond[6]=(x320+(((-1.0)*new_r21*x321))+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x319))+((cj16*new_r10))+(((-1.0)*new_r20*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=1.0;
if( IKabs(j17eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j17]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j17array[2], cj17array[2], sj17array[2], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[2]={true,true};
_nj17 = 2;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x323=IKPowWithIntegerCheck(sj16,-1);
if(!x323.valid){
continue;
}
IkReal x322=x323.value;
CheckValue<IkReal> x324=IKPowWithIntegerCheck(sj15,-1);
if(!x324.valid){
continue;
}
if( IKabs((x322*(x324.value)*(((((-1.0)*cj15*cj16*new_r20))+((new_r00*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x322)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x322*(x324.value)*(((((-1.0)*cj15*cj16*new_r20))+((new_r00*sj16))))))+IKsqr(((-1.0)*new_r20*x322))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x322*(x324.value)*(((((-1.0)*cj15*cj16*new_r20))+((new_r00*sj16))))), ((-1.0)*new_r20*x322));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x325=IKsin(j17);
IkReal x326=IKcos(j17);
IkReal x327=((1.0)*sj15);
IkReal x328=(cj15*new_r01);
IkReal x329=((1.0)*cj16);
IkReal x330=((1.0)*sj16);
IkReal x331=(cj15*new_r00);
IkReal x332=(cj16*x326);
IkReal x333=(cj16*x325);
evalcond[0]=(((sj16*x326))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x325*x330)));
evalcond[2]=(((cj15*new_r10))+x325+(((-1.0)*new_r00*x327)));
evalcond[3]=(((cj15*new_r11))+x326+(((-1.0)*new_r01*x327)));
evalcond[4]=(x332+x331+((new_r10*sj15)));
evalcond[5]=(((sj15*x332))+((cj15*x325))+new_r10);
evalcond[6]=((((-1.0)*x325*x329))+x328+((new_r11*sj15)));
evalcond[7]=((((-1.0)*x325*x327))+new_r00+((cj15*x332)));
evalcond[8]=(((cj15*x326))+new_r11+(((-1.0)*x327*x333)));
evalcond[9]=((((-1.0)*x326*x327))+(((-1.0)*cj15*x325*x329))+new_r01);
evalcond[10]=((((-1.0)*cj16*new_r11*x327))+(((-1.0)*new_r21*x330))+x325+(((-1.0)*x328*x329)));
evalcond[11]=((((-1.0)*x329*x331))+(((-1.0)*new_r20*x330))+(((-1.0)*cj16*new_r10*x327))+(((-1.0)*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x335=IKPowWithIntegerCheck(sj16,-1);
if(!x335.valid){
continue;
}
IkReal x334=x335.value;
CheckValue<IkReal> x336=IKPowWithIntegerCheck(cj15,-1);
if(!x336.valid){
continue;
}
if( IKabs((x334*(x336.value)*((((cj16*new_r20*sj15))+(((-1.0)*new_r10*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x334)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x334*(x336.value)*((((cj16*new_r20*sj15))+(((-1.0)*new_r10*sj16))))))+IKsqr(((-1.0)*new_r20*x334))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x334*(x336.value)*((((cj16*new_r20*sj15))+(((-1.0)*new_r10*sj16))))), ((-1.0)*new_r20*x334));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x337=IKsin(j17);
IkReal x338=IKcos(j17);
IkReal x339=((1.0)*sj15);
IkReal x340=(cj15*new_r01);
IkReal x341=((1.0)*cj16);
IkReal x342=((1.0)*sj16);
IkReal x343=(cj15*new_r00);
IkReal x344=(cj16*x338);
IkReal x345=(cj16*x337);
evalcond[0]=(((sj16*x338))+new_r20);
evalcond[1]=((((-1.0)*x337*x342))+new_r21);
evalcond[2]=(((cj15*new_r10))+x337+(((-1.0)*new_r00*x339)));
evalcond[3]=(((cj15*new_r11))+x338+(((-1.0)*new_r01*x339)));
evalcond[4]=(x343+x344+((new_r10*sj15)));
evalcond[5]=(((sj15*x344))+new_r10+((cj15*x337)));
evalcond[6]=((((-1.0)*x337*x341))+x340+((new_r11*sj15)));
evalcond[7]=((((-1.0)*x337*x339))+new_r00+((cj15*x344)));
evalcond[8]=(new_r11+((cj15*x338))+(((-1.0)*x339*x345)));
evalcond[9]=((((-1.0)*x338*x339))+(((-1.0)*cj15*x337*x341))+new_r01);
evalcond[10]=((((-1.0)*cj16*new_r11*x339))+x337+(((-1.0)*x340*x341))+(((-1.0)*new_r21*x342)));
evalcond[11]=((((-1.0)*cj16*new_r10*x339))+(((-1.0)*x338))+(((-1.0)*x341*x343))+(((-1.0)*new_r20*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x346 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x346.valid){
continue;
}
CheckValue<IkReal> x347=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x347.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x346.value)+(((1.5707963267949)*(x347.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x348=IKsin(j17);
IkReal x349=IKcos(j17);
IkReal x350=((1.0)*sj15);
IkReal x351=(cj15*new_r01);
IkReal x352=((1.0)*cj16);
IkReal x353=((1.0)*sj16);
IkReal x354=(cj15*new_r00);
IkReal x355=(cj16*x349);
IkReal x356=(cj16*x348);
evalcond[0]=(((sj16*x349))+new_r20);
evalcond[1]=((((-1.0)*x348*x353))+new_r21);
evalcond[2]=(((cj15*new_r10))+x348+(((-1.0)*new_r00*x350)));
evalcond[3]=(((cj15*new_r11))+x349+(((-1.0)*new_r01*x350)));
evalcond[4]=(x355+x354+((new_r10*sj15)));
evalcond[5]=(new_r10+((cj15*x348))+((sj15*x355)));
evalcond[6]=((((-1.0)*x348*x352))+x351+((new_r11*sj15)));
evalcond[7]=((((-1.0)*x348*x350))+new_r00+((cj15*x355)));
evalcond[8]=(new_r11+((cj15*x349))+(((-1.0)*x350*x356)));
evalcond[9]=((((-1.0)*x349*x350))+(((-1.0)*cj15*x348*x352))+new_r01);
evalcond[10]=((((-1.0)*cj16*new_r11*x350))+x348+(((-1.0)*x351*x352))+(((-1.0)*new_r21*x353)));
evalcond[11]=((((-1.0)*cj16*new_r10*x350))+(((-1.0)*x352*x354))+(((-1.0)*new_r20*x353))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x357=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x357.valid){
continue;
}
CheckValue<IkReal> x358 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x358.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x357.value)))+(x358.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x359=IKcos(j15);
IkReal x360=IKsin(j15);
IkReal x361=((1.0)*cj16);
IkReal x362=(new_r02*x359);
IkReal x363=(sj16*x359);
IkReal x364=(sj16*x360);
IkReal x365=(new_r12*x360);
evalcond[0]=(x363+new_r02);
evalcond[1]=(x364+new_r12);
evalcond[2]=((((-1.0)*new_r02*x360))+((new_r12*x359)));
evalcond[3]=(x362+x365+sj16);
evalcond[4]=((((-1.0)*new_r20*x361))+((new_r00*x363))+((new_r10*x364)));
evalcond[5]=(((new_r01*x363))+((new_r11*x364))+(((-1.0)*new_r21*x361)));
evalcond[6]=((1.0)+((sj16*x362))+(((-1.0)*new_r22*x361))+((new_r12*x364)));
evalcond[7]=((((-1.0)*x361*x362))+(((-1.0)*x361*x365))+(((-1.0)*new_r22*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[3];
j17eval[0]=sj16;
j17eval[1]=IKsign(sj16);
j17eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  || IKabs(j17eval[2]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=cj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal j17eval[2];
j17eval[0]=sj15;
j17eval[1]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x366=IKsin(j17);
IkReal x367=IKcos(j17);
CheckValue<IkReal> x372=IKPowWithIntegerCheck(new_r02,-1);
if(!x372.valid){
continue;
}
IkReal x368=x372.value;
IkReal x369=new_r22*new_r22;
IkReal x370=(x368*x369);
IkReal x371=((1.0)*x367);
evalcond[0]=(x366+new_r10);
evalcond[1]=(x367+new_r11);
evalcond[2]=(new_r21+((new_r02*x366)));
evalcond[3]=(((cj16*x367))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*new_r02*x371)));
evalcond[5]=(new_r01+(((-1.0)*cj16*x366)));
evalcond[6]=(x366+((new_r21*x370))+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x370))+(((-1.0)*x371))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r10, new_r11);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x373=IKcos(j17);
IkReal x374=IKsin(j17);
IkReal x375=((1.0)*sj16);
IkReal x376=((1.0)*x374);
evalcond[0]=(new_r20+((new_r02*x373)));
evalcond[1]=(x374+(((-1.0)*new_r10)));
evalcond[2]=(x373+(((-1.0)*new_r11)));
evalcond[3]=(new_r21+(((-1.0)*new_r02*x376)));
evalcond[4]=(((cj16*x373))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*cj16*x376)));
evalcond[6]=((((-1.0)*new_r21*x375))+x374+((cj16*new_r01)));
evalcond[7]=((((-1.0)*x373))+(((-1.0)*new_r20*x375))+((cj16*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x377=((1.0)*cj15);
if( IKabs(((((-1.0)*new_r10*x377))+((new_r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x377))+(((-1.0)*new_r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r10*x377))+((new_r00*sj15))))+IKsqr(((((-1.0)*new_r00*x377))+(((-1.0)*new_r10*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*new_r10*x377))+((new_r00*sj15))), ((((-1.0)*new_r00*x377))+(((-1.0)*new_r10*sj15))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x378=IKcos(j17);
IkReal x379=IKsin(j17);
IkReal x380=((1.0)*sj15);
IkReal x381=(cj15*x378);
IkReal x382=((1.0)*x379);
IkReal x383=(x379*x380);
evalcond[0]=(x378+((cj15*new_r00))+((new_r10*sj15)));
evalcond[1]=((((-1.0)*new_r00*x380))+((cj15*new_r10))+x379);
evalcond[2]=((((-1.0)*new_r01*x380))+((cj15*new_r11))+x378);
evalcond[3]=(((sj15*x378))+((cj15*x379))+new_r10);
evalcond[4]=(((cj15*new_r01))+(((-1.0)*x382))+((new_r11*sj15)));
evalcond[5]=(x381+(((-1.0)*x383))+new_r00);
evalcond[6]=(x381+(((-1.0)*x383))+new_r11);
evalcond[7]=((((-1.0)*cj15*x382))+(((-1.0)*x378*x380))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x384=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj15*new_r10))+(((-1.0)*sj15*x384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*x384))+((new_r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*new_r10))+(((-1.0)*sj15*x384))))+IKsqr(((((-1.0)*cj15*x384))+((new_r10*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((((-1.0)*cj15*new_r10))+(((-1.0)*sj15*x384))), ((((-1.0)*cj15*x384))+((new_r10*sj15))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x385=IKsin(j17);
IkReal x386=IKcos(j17);
IkReal x387=((1.0)*sj15);
IkReal x388=(cj15*x385);
IkReal x389=((1.0)*x386);
IkReal x390=(x386*x387);
evalcond[0]=(x385+((cj15*new_r01))+((new_r11*sj15)));
evalcond[1]=((((-1.0)*new_r00*x387))+((cj15*new_r10))+x385);
evalcond[2]=((((-1.0)*new_r01*x387))+((cj15*new_r11))+x386);
evalcond[3]=(((cj15*new_r00))+(((-1.0)*x389))+((new_r10*sj15)));
evalcond[4]=(((sj15*x385))+((cj15*x386))+new_r11);
evalcond[5]=((((-1.0)*x390))+x388+new_r10);
evalcond[6]=((((-1.0)*x390))+x388+new_r01);
evalcond[7]=((((-1.0)*cj15*x389))+new_r00+(((-1.0)*x385*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(new_r00, new_r01);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x391=IKcos(j17);
IkReal x392=IKsin(j17);
IkReal x393=((1.0)*cj16);
IkReal x394=((1.0)*sj16);
IkReal x395=((1.0)*x391);
evalcond[0]=(x392+(((-1.0)*new_r00)));
evalcond[1]=(x391+(((-1.0)*new_r01)));
evalcond[2]=(((cj16*x391))+new_r10);
evalcond[3]=((((-1.0)*new_r12*x395))+new_r20);
evalcond[4]=(new_r21+(((-1.0)*x392*x394)));
evalcond[5]=(new_r11+(((-1.0)*x392*x393)));
evalcond[6]=((((-1.0)*new_r21*x394))+x392+(((-1.0)*new_r11*x393)));
CheckValue<IkReal> x396=IKPowWithIntegerCheck(new_r12,-1);
if(!x396.valid){
continue;
}
evalcond[7]=((((-1.0)*x395))+((new_r12*new_r20))+((new_r20*(x396.value)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[8];
IkReal x397=IKcos(j17);
IkReal x398=IKsin(j17);
IkReal x399=((1.0)*sj16);
evalcond[0]=(x398+new_r00);
evalcond[1]=(x397+new_r01);
evalcond[2]=(new_r20+((new_r12*x397)));
evalcond[3]=((((-1.0)*x398*x399))+new_r21);
evalcond[4]=(((cj16*x397))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*cj16*x398))+(((-1.0)*new_r11)));
evalcond[6]=((((-1.0)*new_r21*x399))+x398+((cj16*new_r11)));
evalcond[7]=((((-1.0)*x397))+((cj16*new_r10))+(((-1.0)*new_r20*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j17eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j17eval[0]=1.0;
if( IKabs(j17eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j17]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j17array[2], cj17array[2], sj17array[2], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[2]={true,true};
_nj17 = 2;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x401=IKPowWithIntegerCheck(sj16,-1);
if(!x401.valid){
continue;
}
IkReal x400=x401.value;
CheckValue<IkReal> x402=IKPowWithIntegerCheck(sj15,-1);
if(!x402.valid){
continue;
}
if( IKabs((x400*(x402.value)*(((((-1.0)*cj15*cj16*new_r20))+((new_r00*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x400)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x400*(x402.value)*(((((-1.0)*cj15*cj16*new_r20))+((new_r00*sj16))))))+IKsqr(((-1.0)*new_r20*x400))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x400*(x402.value)*(((((-1.0)*cj15*cj16*new_r20))+((new_r00*sj16))))), ((-1.0)*new_r20*x400));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x403=IKsin(j17);
IkReal x404=IKcos(j17);
IkReal x405=((1.0)*sj15);
IkReal x406=(cj15*new_r01);
IkReal x407=((1.0)*cj16);
IkReal x408=((1.0)*sj16);
IkReal x409=(cj15*new_r00);
IkReal x410=(cj16*x404);
IkReal x411=(cj16*x403);
evalcond[0]=(new_r20+((sj16*x404)));
evalcond[1]=((((-1.0)*x403*x408))+new_r21);
evalcond[2]=(((cj15*new_r10))+x403+(((-1.0)*new_r00*x405)));
evalcond[3]=(((cj15*new_r11))+x404+(((-1.0)*new_r01*x405)));
evalcond[4]=(x409+x410+((new_r10*sj15)));
evalcond[5]=(((cj15*x403))+((sj15*x410))+new_r10);
evalcond[6]=((((-1.0)*x403*x407))+x406+((new_r11*sj15)));
evalcond[7]=(((cj15*x410))+(((-1.0)*x403*x405))+new_r00);
evalcond[8]=(((cj15*x404))+(((-1.0)*x405*x411))+new_r11);
evalcond[9]=((((-1.0)*x404*x405))+new_r01+(((-1.0)*cj15*x403*x407)));
evalcond[10]=((((-1.0)*x406*x407))+x403+(((-1.0)*new_r21*x408))+(((-1.0)*cj16*new_r11*x405)));
evalcond[11]=((((-1.0)*new_r20*x408))+(((-1.0)*x407*x409))+(((-1.0)*cj16*new_r10*x405))+(((-1.0)*x404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x413=IKPowWithIntegerCheck(sj16,-1);
if(!x413.valid){
continue;
}
IkReal x412=x413.value;
CheckValue<IkReal> x414=IKPowWithIntegerCheck(cj15,-1);
if(!x414.valid){
continue;
}
if( IKabs((x412*(x414.value)*((((cj16*new_r20*sj15))+(((-1.0)*new_r10*sj16)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x412)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x412*(x414.value)*((((cj16*new_r20*sj15))+(((-1.0)*new_r10*sj16))))))+IKsqr(((-1.0)*new_r20*x412))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2((x412*(x414.value)*((((cj16*new_r20*sj15))+(((-1.0)*new_r10*sj16))))), ((-1.0)*new_r20*x412));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x415=IKsin(j17);
IkReal x416=IKcos(j17);
IkReal x417=((1.0)*sj15);
IkReal x418=(cj15*new_r01);
IkReal x419=((1.0)*cj16);
IkReal x420=((1.0)*sj16);
IkReal x421=(cj15*new_r00);
IkReal x422=(cj16*x416);
IkReal x423=(cj16*x415);
evalcond[0]=(new_r20+((sj16*x416)));
evalcond[1]=(new_r21+(((-1.0)*x415*x420)));
evalcond[2]=(((cj15*new_r10))+x415+(((-1.0)*new_r00*x417)));
evalcond[3]=(((cj15*new_r11))+x416+(((-1.0)*new_r01*x417)));
evalcond[4]=(x422+x421+((new_r10*sj15)));
evalcond[5]=(((sj15*x422))+((cj15*x415))+new_r10);
evalcond[6]=(x418+(((-1.0)*x415*x419))+((new_r11*sj15)));
evalcond[7]=(((cj15*x422))+(((-1.0)*x415*x417))+new_r00);
evalcond[8]=(((cj15*x416))+(((-1.0)*x417*x423))+new_r11);
evalcond[9]=((((-1.0)*cj15*x415*x419))+(((-1.0)*x416*x417))+new_r01);
evalcond[10]=((((-1.0)*x418*x419))+x415+(((-1.0)*new_r21*x420))+(((-1.0)*cj16*new_r11*x417)));
evalcond[11]=((((-1.0)*x419*x421))+(((-1.0)*cj16*new_r10*x417))+(((-1.0)*new_r20*x420))+(((-1.0)*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x425.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x424.value)+(((1.5707963267949)*(x425.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[12];
IkReal x426=IKsin(j17);
IkReal x427=IKcos(j17);
IkReal x428=((1.0)*sj15);
IkReal x429=(cj15*new_r01);
IkReal x430=((1.0)*cj16);
IkReal x431=((1.0)*sj16);
IkReal x432=(cj15*new_r00);
IkReal x433=(cj16*x427);
IkReal x434=(cj16*x426);
evalcond[0]=(((sj16*x427))+new_r20);
evalcond[1]=((((-1.0)*x426*x431))+new_r21);
evalcond[2]=((((-1.0)*new_r00*x428))+((cj15*new_r10))+x426);
evalcond[3]=(((cj15*new_r11))+x427+(((-1.0)*new_r01*x428)));
evalcond[4]=(x432+x433+((new_r10*sj15)));
evalcond[5]=(((cj15*x426))+new_r10+((sj15*x433)));
evalcond[6]=(x429+(((-1.0)*x426*x430))+((new_r11*sj15)));
evalcond[7]=((((-1.0)*x426*x428))+((cj15*x433))+new_r00);
evalcond[8]=(((cj15*x427))+new_r11+(((-1.0)*x428*x434)));
evalcond[9]=((((-1.0)*x427*x428))+(((-1.0)*cj15*x426*x430))+new_r01);
evalcond[10]=((((-1.0)*x429*x430))+x426+(((-1.0)*cj16*new_r11*x428))+(((-1.0)*new_r21*x431)));
evalcond[11]=((((-1.0)*x430*x432))+(((-1.0)*x427))+(((-1.0)*new_r20*x431))+(((-1.0)*cj16*new_r10*x428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
CheckValue<IkReal> x435 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x435.valid){
continue;
}
CheckValue<IkReal> x436=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x436.valid){
continue;
}
j17array[0]=((-1.5707963267949)+(x435.value)+(((1.5707963267949)*(x436.value))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[2];
evalcond[0]=(((sj16*(IKcos(j17))))+new_r20);
evalcond[1]=((((-1.0)*sj16*(IKsin(j17))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[3];
j15eval[0]=sj16;
j15eval[1]=IKsign(sj16);
j15eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
j15eval[0]=new_r12;
j15eval[1]=sj16;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j16))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj16=0;
cj16=1.0;
j16=0;
IkReal x437=((1.0)*new_r10);
IkReal x438=((new_r10*new_r10)+(new_r00*new_r00));
j15eval[0]=x438;
j15eval[1]=((IKabs(((((-1.0)*sj17*x437))+(((-1.0)*cj17*new_r00)))))+(IKabs(((((-1.0)*cj17*x437))+((new_r00*sj17))))));
j15eval[2]=IKsign(x438);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj16=0;
cj16=1.0;
j16=0;
IkReal x439=((1.0)*cj17);
IkReal x440=(((new_r10*new_r11))+((new_r00*new_r01)));
j15eval[0]=x440;
j15eval[1]=((IKabs(((((-1.0)*new_r11*x439))+((cj17*new_r00)))))+(IKabs(((((-1.0)*new_r01*x439))+(((-1.0)*new_r10*x439))))));
j15eval[2]=IKsign(x440);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj16=0;
cj16=1.0;
j16=0;
IkReal x441=((1.0)*new_r10);
IkReal x442=((((-1.0)*sj17*x441))+((cj17*new_r00)));
j15eval[0]=x442;
j15eval[1]=((IKabs(((((-1.0)*new_r00*x441))+((cj17*sj17)))))+(IKabs(((new_r10*new_r10)+(((-1.0)*(cj17*cj17)))))));
j15eval[2]=IKsign(x442);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x445 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x445)==0){
continue;
}
IkReal x443=pow(x445,-0.5);
IkReal x444=((-1.0)*x443);
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
IkReal gconst1=(new_r00*x444);
IkReal gconst2=(new_r10*x444);
CheckValue<IkReal> x447 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x447.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[2];
CheckValue<IkReal> x451 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x451.valid){
continue;
}
IkReal x448=((-1.0)*(x451.value));
IkReal x449=x443;
IkReal x450=((-1.0)*x449);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst1;
cj17=gconst2;
j17=x448;
IkReal gconst1=(new_r00*x450);
IkReal gconst2=(new_r10*x450);
IkReal x452=((new_r10*new_r10)+(new_r00*new_r00));
j15eval[0]=x452;
j15eval[1]=IKsign(x452);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
CheckValue<IkReal> x456 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
IkReal x453=((-1.0)*(x456.value));
IkReal x454=x443;
IkReal x455=((-1.0)*x454);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst1;
cj17=gconst2;
j17=x453;
IkReal gconst1=(new_r00*x455);
IkReal gconst2=(new_r10*x455);
IkReal x457=new_r10*new_r10;
IkReal x458=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x459=x443;
IkReal x460=(new_r10*x459);
j15eval[0]=x458;
j15eval[1]=IKsign(x458);
j15eval[2]=((IKabs((((new_r11*x460))+(((-1.0)*new_r00*x460)))))+(IKabs((((new_r01*x460))+((x457*x459))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x464 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x464.valid){
continue;
}
IkReal x461=((-1.0)*(x464.value));
IkReal x462=x443;
IkReal x463=((-1.0)*x462);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst1;
cj17=gconst2;
j17=x461;
IkReal gconst1=(new_r00*x463);
IkReal gconst2=(new_r10*x463);
IkReal x465=new_r10*new_r10;
IkReal x466=new_r00*new_r00;
CheckValue<IkReal> x473=IKPowWithIntegerCheck((x466+x465),-1);
if(!x473.valid){
continue;
}
IkReal x467=x473.value;
IkReal x468=(x465*x467);
CheckValue<IkReal> x474=IKPowWithIntegerCheck(((((-1.0)*x466))+(((-1.0)*x465))),-1);
if(!x474.valid){
continue;
}
IkReal x469=x474.value;
IkReal x470=((1.0)*x469);
IkReal x471=(new_r00*x470);
j15eval[0]=((IKabs((((x466*x468))+(((-1.0)*x468))+((x467*(x466*x466))))))+(IKabs(((((-1.0)*new_r10*x471))+(((-1.0)*x471*(new_r10*new_r10*new_r10)))+(((-1.0)*new_r10*x471*(new_r00*new_r00)))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x475 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst2*gconst2)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst1*gconst2))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476=IKPowWithIntegerCheck(IKsign((((gconst2*new_r10))+((gconst1*new_r00)))),-1);
if(!x476.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x475.value)+(((1.5707963267949)*(x476.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x477=IKsin(j15);
IkReal x478=IKcos(j15);
IkReal x479=(gconst2*x478);
IkReal x480=((1.0)*x477);
IkReal x481=(gconst1*x478);
IkReal x482=(gconst1*x480);
evalcond[0]=(((new_r10*x477))+gconst2+((new_r00*x478)));
evalcond[1]=(x481+((gconst2*x477))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x480))+((new_r10*x478))+gconst1);
evalcond[3]=((((-1.0)*new_r01*x480))+gconst2+((new_r11*x478)));
evalcond[4]=((((-1.0)*x482))+x479+new_r00);
evalcond[5]=((((-1.0)*x482))+x479+new_r11);
evalcond[6]=(((new_r01*x478))+((new_r11*x477))+(((-1.0)*gconst1)));
evalcond[7]=((((-1.0)*gconst2*x480))+(((-1.0)*x481))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x483=((1.0)*gconst2);
CheckValue<IkReal> x484 = IKatan2WithCheck(IkReal((((gconst2*new_r00))+(((-1.0)*new_r11*x483)))),IkReal(((((-1.0)*new_r01*x483))+(((-1.0)*new_r10*x483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x485.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x484.value)+(((1.5707963267949)*(x485.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x486=IKsin(j15);
IkReal x487=IKcos(j15);
IkReal x488=(gconst2*x487);
IkReal x489=((1.0)*x486);
IkReal x490=(gconst1*x487);
IkReal x491=(gconst1*x489);
evalcond[0]=(gconst2+((new_r10*x486))+((new_r00*x487)));
evalcond[1]=(x490+((gconst2*x486))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x489))+gconst1+((new_r10*x487)));
evalcond[3]=((((-1.0)*new_r01*x489))+((new_r11*x487))+gconst2);
evalcond[4]=((((-1.0)*x491))+x488+new_r00);
evalcond[5]=((((-1.0)*x491))+x488+new_r11);
evalcond[6]=(((new_r11*x486))+(((-1.0)*gconst1))+((new_r01*x487)));
evalcond[7]=((((-1.0)*gconst2*x489))+(((-1.0)*x490))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x492=((1.0)*new_r10);
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal((((gconst1*new_r00))+(((-1.0)*gconst2*x492)))),IkReal(((((-1.0)*gconst1*x492))+(((-1.0)*gconst2*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x493.value)))+(x494.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x495=IKsin(j15);
IkReal x496=IKcos(j15);
IkReal x497=(gconst2*x496);
IkReal x498=((1.0)*x495);
IkReal x499=(gconst1*x496);
IkReal x500=(gconst1*x498);
evalcond[0]=(gconst2+((new_r10*x495))+((new_r00*x496)));
evalcond[1]=(((gconst2*x495))+x499+new_r10);
evalcond[2]=((((-1.0)*new_r00*x498))+gconst1+((new_r10*x496)));
evalcond[3]=((((-1.0)*new_r01*x498))+gconst2+((new_r11*x496)));
evalcond[4]=((((-1.0)*x500))+x497+new_r00);
evalcond[5]=((((-1.0)*x500))+x497+new_r11);
evalcond[6]=((((-1.0)*gconst1))+((new_r11*x495))+((new_r01*x496)));
evalcond[7]=((((-1.0)*gconst2*x498))+(((-1.0)*x499))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x503 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x503)==0){
continue;
}
IkReal x501=pow(x503,-0.5);
IkReal x502=((1.0)*x501);
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
IkReal gconst4=(new_r00*x502);
IkReal gconst5=(new_r10*x502);
CheckValue<IkReal> x505 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x505.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[2];
CheckValue<IkReal> x509 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x509.valid){
continue;
}
IkReal x506=((1.0)*(x509.value));
IkReal x507=x501;
IkReal x508=((1.0)*x507);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x506)));
IkReal gconst4=(new_r00*x508);
IkReal gconst5=(new_r10*x508);
IkReal x510=((new_r10*new_r10)+(new_r00*new_r00));
j15eval[0]=x510;
j15eval[1]=IKsign(x510);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
IkReal x511=((1.0)*(x514.value));
IkReal x512=x501;
IkReal x513=((1.0)*x512);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x511)));
IkReal gconst4=(new_r00*x513);
IkReal gconst5=(new_r10*x513);
IkReal x515=new_r10*new_r10;
IkReal x516=(new_r10*new_r11);
IkReal x517=(((new_r00*new_r01))+x516);
IkReal x518=x501;
IkReal x519=((1.0)*x518);
j15eval[0]=x517;
j15eval[1]=((IKabs(((((-1.0)*x515*x519))+(((-1.0)*new_r01*new_r10*x519)))))+(IKabs((((new_r00*new_r10*x518))+(((-1.0)*x516*x519))))));
j15eval[2]=IKsign(x517);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
IkReal x520=((1.0)*(x523.value));
IkReal x521=x501;
IkReal x522=((1.0)*x521);
sj16=0;
cj16=1.0;
j16=0;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x520)));
IkReal gconst4=(new_r00*x522);
IkReal gconst5=(new_r10*x522);
IkReal x524=new_r10*new_r10;
IkReal x525=new_r00*new_r00;
CheckValue<IkReal> x532=IKPowWithIntegerCheck((x524+x525),-1);
if(!x532.valid){
continue;
}
IkReal x526=x532.value;
IkReal x527=(x524*x526);
CheckValue<IkReal> x533=IKPowWithIntegerCheck(((((-1.0)*x524))+(((-1.0)*x525))),-1);
if(!x533.valid){
continue;
}
IkReal x528=x533.value;
IkReal x529=((1.0)*x528);
IkReal x530=(new_r00*x529);
j15eval[0]=((IKabs(((((-1.0)*new_r10*x530))+(((-1.0)*new_r10*x530*(new_r00*new_r00)))+(((-1.0)*x530*(new_r10*new_r10*new_r10))))))+(IKabs((((x526*(x525*x525)))+(((-1.0)*x527))+((x525*x527))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x534=IKPowWithIntegerCheck(IKsign((((gconst4*new_r00))+((gconst5*new_r10)))),-1);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst5*gconst5)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst4*gconst5))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x535.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x534.value)))+(x535.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x536=IKsin(j15);
IkReal x537=IKcos(j15);
IkReal x538=((1.0)*gconst4);
IkReal x539=(gconst5*x537);
IkReal x540=(gconst5*x536);
IkReal x541=((1.0)*x536);
IkReal x542=(x536*x538);
evalcond[0]=(gconst5+((new_r10*x536))+((new_r00*x537)));
evalcond[1]=(((gconst4*x537))+x540+new_r10);
evalcond[2]=((((-1.0)*new_r00*x541))+gconst4+((new_r10*x537)));
evalcond[3]=(gconst5+((new_r11*x537))+(((-1.0)*new_r01*x541)));
evalcond[4]=((((-1.0)*x542))+x539+new_r00);
evalcond[5]=((((-1.0)*x542))+x539+new_r11);
evalcond[6]=(((new_r01*x537))+((new_r11*x536))+(((-1.0)*x538)));
evalcond[7]=((((-1.0)*x537*x538))+(((-1.0)*x540))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x543=((1.0)*gconst5);
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal((((gconst5*new_r00))+(((-1.0)*new_r11*x543)))),IkReal(((((-1.0)*new_r10*x543))+(((-1.0)*new_r01*x543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x545=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x545.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x544.value)+(((1.5707963267949)*(x545.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x546=IKsin(j15);
IkReal x547=IKcos(j15);
IkReal x548=((1.0)*gconst4);
IkReal x549=(gconst5*x547);
IkReal x550=(gconst5*x546);
IkReal x551=((1.0)*x546);
IkReal x552=(x546*x548);
evalcond[0]=(((new_r00*x547))+gconst5+((new_r10*x546)));
evalcond[1]=(((gconst4*x547))+x550+new_r10);
evalcond[2]=(gconst4+((new_r10*x547))+(((-1.0)*new_r00*x551)));
evalcond[3]=(gconst5+(((-1.0)*new_r01*x551))+((new_r11*x547)));
evalcond[4]=((((-1.0)*x552))+x549+new_r00);
evalcond[5]=((((-1.0)*x552))+x549+new_r11);
evalcond[6]=(((new_r11*x546))+(((-1.0)*x548))+((new_r01*x547)));
evalcond[7]=((((-1.0)*x550))+(((-1.0)*x547*x548))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x553=((1.0)*new_r10);
CheckValue<IkReal> x554=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal((((gconst4*new_r00))+(((-1.0)*gconst5*x553)))),IkReal(((((-1.0)*gconst4*x553))+(((-1.0)*gconst5*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x554.value)))+(x555.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x556=IKsin(j15);
IkReal x557=IKcos(j15);
IkReal x558=((1.0)*gconst4);
IkReal x559=(gconst5*x557);
IkReal x560=(gconst5*x556);
IkReal x561=((1.0)*x556);
IkReal x562=(x556*x558);
evalcond[0]=(((new_r10*x556))+gconst5+((new_r00*x557)));
evalcond[1]=(((gconst4*x557))+x560+new_r10);
evalcond[2]=((((-1.0)*new_r00*x561))+((new_r10*x557))+gconst4);
evalcond[3]=(((new_r11*x557))+gconst5+(((-1.0)*new_r01*x561)));
evalcond[4]=(x559+new_r00+(((-1.0)*x562)));
evalcond[5]=(x559+new_r11+(((-1.0)*x562)));
evalcond[6]=(((new_r11*x556))+(((-1.0)*x558))+((new_r01*x557)));
evalcond[7]=((((-1.0)*x560))+new_r01+(((-1.0)*x557*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x563=IKcos(j15);
IkReal x564=IKsin(j15);
IkReal x565=((1.0)*x564);
evalcond[0]=(x563+new_r10);
evalcond[1]=(new_r00+(((-1.0)*x565)));
evalcond[2]=(new_r11+(((-1.0)*x565)));
evalcond[3]=((((-1.0)*x563))+new_r01);
evalcond[4]=(((new_r00*x563))+((new_r10*x564)));
evalcond[5]=(((new_r11*x563))+(((-1.0)*new_r01*x565)));
evalcond[6]=((-1.0)+((new_r01*x563))+((new_r11*x564)));
evalcond[7]=((1.0)+(((-1.0)*new_r00*x565))+((new_r10*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x566=IKsin(j15);
IkReal x567=IKcos(j15);
IkReal x568=((1.0)*x566);
evalcond[0]=(x566+new_r00);
evalcond[1]=(x566+new_r11);
evalcond[2]=(x567+new_r01);
evalcond[3]=((((-1.0)*x567))+new_r10);
evalcond[4]=(((new_r00*x567))+((new_r10*x566)));
evalcond[5]=(((new_r11*x567))+(((-1.0)*new_r01*x568)));
evalcond[6]=((1.0)+((new_r01*x567))+((new_r11*x566)));
evalcond[7]=((-1.0)+(((-1.0)*new_r00*x568))+((new_r10*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=1.0;
j16=0;
new_r10=0;
new_r00=0;
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x570 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
IkReal x569=x570.value;
j15array[0]=((-1.0)*x569);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x569)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j15))))+((new_r11*(IKcos(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=1.0;
j16=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
IkReal x571=x572.value;
j15array[0]=((-1.0)*x571);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x571)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j15))))+((new_r11*(IKcos(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x573=((1.0)*new_r10);
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x573))+((cj17*sj17)))),IkReal(((new_r10*new_r10)+(((-1.0)*(cj17*cj17))))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj17*x573))+((cj17*new_r00)))),-1);
if(!x575.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x576=IKcos(j15);
IkReal x577=IKsin(j15);
IkReal x578=((1.0)*sj17);
IkReal x579=(cj17*x576);
IkReal x580=(cj17*x577);
IkReal x581=((1.0)*x577);
IkReal x582=(x577*x578);
evalcond[0]=(((new_r00*x576))+((new_r10*x577))+cj17);
evalcond[1]=(((sj17*x576))+x580+new_r10);
evalcond[2]=(((new_r10*x576))+sj17+(((-1.0)*new_r00*x581)));
evalcond[3]=((((-1.0)*new_r01*x581))+((new_r11*x576))+cj17);
evalcond[4]=(x579+new_r00+(((-1.0)*x582)));
evalcond[5]=(x579+new_r11+(((-1.0)*x582)));
evalcond[6]=(((new_r11*x577))+((new_r01*x576))+(((-1.0)*x578)));
evalcond[7]=((((-1.0)*x580))+(((-1.0)*x576*x578))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x583=((1.0)*cj17);
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x583))+((cj17*new_r00)))),IkReal(((((-1.0)*new_r01*x583))+(((-1.0)*new_r10*x583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x585.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x584.value)+(((1.5707963267949)*(x585.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x586=IKcos(j15);
IkReal x587=IKsin(j15);
IkReal x588=((1.0)*sj17);
IkReal x589=(cj17*x586);
IkReal x590=(cj17*x587);
IkReal x591=((1.0)*x587);
IkReal x592=(x587*x588);
evalcond[0]=(cj17+((new_r00*x586))+((new_r10*x587)));
evalcond[1]=(((sj17*x586))+x590+new_r10);
evalcond[2]=((((-1.0)*new_r00*x591))+sj17+((new_r10*x586)));
evalcond[3]=((((-1.0)*new_r01*x591))+cj17+((new_r11*x586)));
evalcond[4]=((((-1.0)*x592))+x589+new_r00);
evalcond[5]=((((-1.0)*x592))+x589+new_r11);
evalcond[6]=(((new_r01*x586))+(((-1.0)*x588))+((new_r11*x587)));
evalcond[7]=((((-1.0)*x590))+(((-1.0)*x586*x588))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x593=((1.0)*new_r10);
CheckValue<IkReal> x594=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x594.valid){
continue;
}
CheckValue<IkReal> x595 = IKatan2WithCheck(IkReal((((new_r00*sj17))+(((-1.0)*cj17*x593)))),IkReal(((((-1.0)*sj17*x593))+(((-1.0)*cj17*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x595.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x594.value)))+(x595.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x596=IKcos(j15);
IkReal x597=IKsin(j15);
IkReal x598=((1.0)*sj17);
IkReal x599=(cj17*x596);
IkReal x600=(cj17*x597);
IkReal x601=((1.0)*x597);
IkReal x602=(x597*x598);
evalcond[0]=(((new_r10*x597))+((new_r00*x596))+cj17);
evalcond[1]=(x600+new_r10+((sj17*x596)));
evalcond[2]=(((new_r10*x596))+sj17+(((-1.0)*new_r00*x601)));
evalcond[3]=(((new_r11*x596))+cj17+(((-1.0)*new_r01*x601)));
evalcond[4]=(x599+(((-1.0)*x602))+new_r00);
evalcond[5]=(x599+(((-1.0)*x602))+new_r11);
evalcond[6]=(((new_r11*x597))+((new_r01*x596))+(((-1.0)*x598)));
evalcond[7]=((((-1.0)*x596*x598))+(((-1.0)*x600))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j16)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
IkReal x603=((1.0)*sj17);
IkReal x604=(((new_r10*new_r11))+((new_r00*new_r01)));
j15eval[0]=x604;
j15eval[1]=((IKabs(((((-1.0)*new_r11*x603))+(((-1.0)*new_r00*x603)))))+(IKabs(((((-1.0)*new_r10*x603))+((new_r01*sj17))))));
j15eval[2]=IKsign(x604);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
IkReal x605=((1.0)*new_r11);
IkReal x606=((new_r01*new_r01)+(new_r11*new_r11));
j15eval[0]=x606;
j15eval[1]=((IKabs(((((-1.0)*sj17*x605))+((cj17*new_r01)))))+(IKabs(((((-1.0)*cj17*x605))+(((-1.0)*new_r01*sj17))))));
j15eval[2]=IKsign(x606);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
IkReal x607=(((new_r11*sj17))+((cj17*new_r01)));
j15eval[0]=x607;
j15eval[1]=((IKabs(((((-1.0)*cj17*sj17))+(((-1.0)*new_r10*new_r11)))))+(IKabs(((-1.0)+((new_r01*new_r10))+(cj17*cj17)))));
j15eval[2]=IKsign(x607);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x609 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x609)==0){
continue;
}
IkReal x608=pow(x609,-0.5);
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
IkReal gconst7=((-1.0)*new_r01*x608);
IkReal gconst8=(new_r11*x608);
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x611.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
CheckValue<IkReal> x614 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x614.valid){
continue;
}
IkReal x612=((-1.0)*(x614.value));
IkReal x613=x608;
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x612;
IkReal gconst7=((-1.0)*new_r01*x613);
IkReal gconst8=(new_r11*x613);
IkReal x615=new_r01*new_r01;
IkReal x616=(new_r00*new_r01);
IkReal x617=(((new_r10*new_r11))+x616);
IkReal x618=x608;
IkReal x619=(new_r01*x618);
j15eval[0]=x617;
j15eval[1]=IKsign(x617);
j15eval[2]=((IKabs((((x616*x618))+((new_r11*x619)))))+(IKabs(((((-1.0)*x615*x618))+((new_r10*x619))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
CheckValue<IkReal> x622 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x622.valid){
continue;
}
IkReal x620=((-1.0)*(x622.value));
IkReal x621=x608;
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x620;
IkReal gconst7=((-1.0)*new_r01*x621);
IkReal gconst8=(new_r11*x621);
IkReal x623=((new_r01*new_r01)+(new_r11*new_r11));
j15eval[0]=x623;
j15eval[1]=IKsign(x623);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
IkReal x624=((-1.0)*(x626.value));
IkReal x625=x608;
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x624;
IkReal gconst7=((-1.0)*new_r01*x625);
IkReal gconst8=(new_r11*x625);
IkReal x627=new_r01*new_r01;
IkReal x628=new_r11*new_r11;
IkReal x629=((1.0)*x627);
CheckValue<IkReal> x635=IKPowWithIntegerCheck((x627+x628),-1);
if(!x635.valid){
continue;
}
IkReal x630=x635.value;
CheckValue<IkReal> x636=IKPowWithIntegerCheck(((((-1.0)*x629))+(((-1.0)*x628))),-1);
if(!x636.valid){
continue;
}
IkReal x631=x636.value;
IkReal x632=((1.0)*x631);
IkReal x633=(new_r11*x632);
j15eval[0]=((IKabs(((((-1.0)*new_r01*x633))+(((-1.0)*new_r01*x633*(new_r11*new_r11)))+(((-1.0)*x633*(new_r01*new_r01*new_r01))))))+(IKabs(((((-1.0)*x629*x630))+((x630*(x628*x628)))+((x627*x628*x630))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
IkReal x637=((-1.0)*(x638.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x637;
new_r11=0;
new_r00=0;
IkReal x639 = new_r01*new_r01;
if(IKabs(x639)==0){
continue;
}
IkReal gconst7=((-1.0)*new_r01*(pow(x639,-0.5)));
j15eval[0]=new_r10;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x640=IKPowWithIntegerCheck(gconst7,-1);
if(!x640.valid){
continue;
}
cj15array[0]=((-1.0)*new_r10*(x640.value));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x641=IKsin(j15);
IkReal x642=IKcos(j15);
IkReal x643=((-1.0)*x641);
evalcond[0]=(new_r10*x641);
evalcond[1]=(new_r01*x643);
evalcond[2]=(gconst7*x643);
evalcond[3]=(gconst7+((new_r10*x642)));
evalcond[4]=(gconst7+((new_r01*x642)));
evalcond[5]=(((gconst7*x642))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x644=IKPowWithIntegerCheck(new_r10,-1);
if(!x644.valid){
continue;
}
cj15array[0]=((-1.0)*gconst7*(x644.value));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x645=IKsin(j15);
IkReal x646=IKcos(j15);
IkReal x647=(gconst7*x646);
IkReal x648=((-1.0)*x645);
evalcond[0]=(new_r10*x645);
evalcond[1]=(new_r01*x648);
evalcond[2]=(gconst7*x648);
evalcond[3]=(x647+new_r10);
evalcond[4]=(gconst7+((new_r01*x646)));
evalcond[5]=(x647+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst7;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
IkReal x649=((-1.0)*(x650.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x649;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j15eval[0]=-1.0;
j15eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j15eval[2]=-1.0;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
CheckValue<IkReal> x652 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x652.valid){
continue;
}
IkReal x651=((-1.0)*(x652.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x651;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j15eval[0]=-1.0;
j15eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j15eval[2]=-1.0;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
IkReal x653=((-1.0)*(x654.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x653;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j15eval[0]=1.0;
j15eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j15eval[2]=1.0;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x655=((1.0)*new_r11);
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal((((gconst8*new_r01))+(((-1.0)*gconst7*x655)))),IkReal(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*x655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
CheckValue<IkReal> x657=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x657.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x656.value)+(((1.5707963267949)*(x657.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x658=IKcos(j15);
IkReal x659=IKsin(j15);
IkReal x660=((1.0)*gconst8);
IkReal x661=(gconst7*x658);
IkReal x662=(gconst7*x659);
IkReal x663=(x659*x660);
evalcond[0]=((((-1.0)*x663))+x661);
evalcond[1]=(gconst7+((new_r01*x658))+((new_r11*x659)));
evalcond[2]=(((gconst8*x658))+x662+new_r11);
evalcond[3]=(gconst8+(((-1.0)*new_r01*x659))+((new_r11*x658)));
evalcond[4]=((((-1.0)*x658*x660))+(((-1.0)*x662)));
evalcond[5]=((((-1.0)*x663))+x661+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x664 = IKatan2WithCheck(IkReal((gconst7*new_r11)),IkReal((gconst8*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst8*gconst8)))+(((-1.0)*(gconst7*gconst7))))),-1);
if(!x665.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x664.value)+(((1.5707963267949)*(x665.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x666=IKcos(j15);
IkReal x667=IKsin(j15);
IkReal x668=((1.0)*gconst8);
IkReal x669=(gconst7*x666);
IkReal x670=(gconst7*x667);
IkReal x671=(x667*x668);
evalcond[0]=(x669+(((-1.0)*x671)));
evalcond[1]=(gconst7+((new_r11*x667))+((new_r01*x666)));
evalcond[2]=(((gconst8*x666))+x670+new_r11);
evalcond[3]=(gconst8+((new_r11*x666))+(((-1.0)*new_r01*x667)));
evalcond[4]=((((-1.0)*x670))+(((-1.0)*x666*x668)));
evalcond[5]=(x669+new_r01+(((-1.0)*x671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal((gconst7*gconst8)),IkReal(gconst8*gconst8),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
CheckValue<IkReal> x673=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*new_r11))+((gconst7*new_r01)))),-1);
if(!x673.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x672.value)+(((1.5707963267949)*(x673.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x674=IKcos(j15);
IkReal x675=IKsin(j15);
IkReal x676=((1.0)*gconst8);
IkReal x677=(gconst7*x674);
IkReal x678=(gconst7*x675);
IkReal x679=(x675*x676);
evalcond[0]=(x677+(((-1.0)*x679)));
evalcond[1]=(((new_r11*x675))+((new_r01*x674))+gconst7);
evalcond[2]=(x678+new_r11+((gconst8*x674)));
evalcond[3]=(((new_r11*x674))+gconst8+(((-1.0)*new_r01*x675)));
evalcond[4]=((((-1.0)*x678))+(((-1.0)*x674*x676)));
evalcond[5]=(x677+new_r01+(((-1.0)*x679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x680=IKPowWithIntegerCheck(gconst8,-1);
if(!x680.valid){
continue;
}
cj15array[0]=(new_r00*(x680.value));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x681=IKsin(j15);
IkReal x682=IKcos(j15);
IkReal x683=((-1.0)*x681);
evalcond[0]=(new_r11*x681);
evalcond[1]=(new_r00*x683);
evalcond[2]=(gconst8*x683);
evalcond[3]=(gconst8+((new_r11*x682)));
evalcond[4]=(new_r11+((gconst8*x682)));
evalcond[5]=((((-1.0)*gconst8))+((new_r00*x682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
IkReal x684=((-1.0)*(x685.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x684;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst7=0;
IkReal x686 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x686)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x686,-0.5)));
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
IkReal x687=((-1.0)*(x688.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x687;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst7=0;
IkReal x689 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x689)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x689,-0.5)));
j15eval[0]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
IkReal x690=((-1.0)*(x691.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x690;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal x692 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x692)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x692,-0.5)));
j15eval[0]=new_r10;
j15eval[1]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x693=IKPowWithIntegerCheck(new_r10,-1);
if(!x693.valid){
continue;
}
CheckValue<IkReal> x694=IKPowWithIntegerCheck(new_r11,-1);
if(!x694.valid){
continue;
}
if( IKabs((gconst8*(x693.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x694.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst8*(x693.value)))+IKsqr(((-1.0)*gconst8*(x694.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((gconst8*(x693.value)), ((-1.0)*gconst8*(x694.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x695=IKcos(j15);
IkReal x696=IKsin(j15);
IkReal x697=((1.0)*gconst8);
IkReal x698=((-1.0)*gconst8);
evalcond[0]=(new_r10*x695);
evalcond[1]=(new_r11*x696);
evalcond[2]=(x695*x698);
evalcond[3]=(x696*x698);
evalcond[4]=(gconst8+((new_r11*x695)));
evalcond[5]=(((gconst8*x695))+new_r11);
evalcond[6]=((((-1.0)*x696*x697))+new_r10);
evalcond[7]=(((new_r10*x696))+(((-1.0)*x697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x699=IKPowWithIntegerCheck(gconst8,-1);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(new_r11,-1);
if(!x700.valid){
continue;
}
if( IKabs((new_r10*(x699.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x700.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x699.value)))+IKsqr(((-1.0)*gconst8*(x700.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((new_r10*(x699.value)), ((-1.0)*gconst8*(x700.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x701=IKcos(j15);
IkReal x702=IKsin(j15);
IkReal x703=((1.0)*gconst8);
IkReal x704=((-1.0)*gconst8);
evalcond[0]=(new_r10*x701);
evalcond[1]=(new_r11*x702);
evalcond[2]=(x701*x704);
evalcond[3]=(x702*x704);
evalcond[4]=(gconst8+((new_r11*x701)));
evalcond[5]=(((gconst8*x701))+new_r11);
evalcond[6]=((((-1.0)*x702*x703))+new_r10);
evalcond[7]=((((-1.0)*x703))+((new_r10*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x705 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x705.valid){
continue;
}
CheckValue<IkReal> x706=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x706.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x705.value)+(((1.5707963267949)*(x706.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x707=IKcos(j15);
IkReal x708=IKsin(j15);
IkReal x709=((1.0)*gconst8);
IkReal x710=((-1.0)*gconst8);
evalcond[0]=(new_r10*x707);
evalcond[1]=(new_r11*x708);
evalcond[2]=(x707*x710);
evalcond[3]=(x708*x710);
evalcond[4]=(gconst8+((new_r11*x707)));
evalcond[5]=(((gconst8*x707))+new_r11);
evalcond[6]=(new_r10+(((-1.0)*x708*x709)));
evalcond[7]=((((-1.0)*x709))+((new_r10*x708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
IkReal x711=((-1.0)*(x712.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x711;
new_r01=0;
IkReal gconst7=0;
IkReal x713 = new_r11*new_r11;
if(IKabs(x713)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x713,-0.5)));
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x715 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x715.valid){
continue;
}
IkReal x714=((-1.0)*(x715.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x714;
new_r01=0;
IkReal gconst7=0;
IkReal x716 = new_r11*new_r11;
if(IKabs(x716)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x716,-0.5)));
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
IkReal x717=((-1.0)*(x718.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst7;
cj17=gconst8;
j17=x717;
new_r01=0;
IkReal x719 = new_r11*new_r11;
if(IKabs(x719)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x719,-0.5)));
j15eval[0]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x720=IKPowWithIntegerCheck(gconst8,-1);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721=IKPowWithIntegerCheck(new_r11,-1);
if(!x721.valid){
continue;
}
if( IKabs((new_r10*(x720.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x721.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x720.value)))+IKsqr(((-1.0)*gconst8*(x721.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((new_r10*(x720.value)), ((-1.0)*gconst8*(x721.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x722=IKsin(j15);
IkReal x723=IKcos(j15);
IkReal x724=((1.0)*gconst8);
evalcond[0]=(new_r11*x722);
evalcond[1]=((-1.0)*gconst8*x722);
evalcond[2]=(gconst8+((new_r11*x723)));
evalcond[3]=(((gconst8*x723))+new_r11);
evalcond[4]=((((-1.0)*x722*x724))+new_r10);
evalcond[5]=((((-1.0)*x723*x724))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x722))+((new_r10*x723)));
evalcond[7]=(((new_r00*x723))+(((-1.0)*x724))+((new_r10*x722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x726.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x725.value)+(((1.5707963267949)*(x726.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x727=IKsin(j15);
IkReal x728=IKcos(j15);
IkReal x729=((1.0)*gconst8);
evalcond[0]=(new_r11*x727);
evalcond[1]=((-1.0)*gconst8*x727);
evalcond[2]=(gconst8+((new_r11*x728)));
evalcond[3]=(((gconst8*x728))+new_r11);
evalcond[4]=((((-1.0)*x727*x729))+new_r10);
evalcond[5]=(new_r00+(((-1.0)*x728*x729)));
evalcond[6]=((((-1.0)*new_r00*x727))+((new_r10*x728)));
evalcond[7]=(((new_r00*x728))+(((-1.0)*x729))+((new_r10*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x730=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x730.valid){
continue;
}
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x730.value)))+(x731.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x732=IKsin(j15);
IkReal x733=IKcos(j15);
IkReal x734=((1.0)*gconst8);
evalcond[0]=(new_r11*x732);
evalcond[1]=((-1.0)*gconst8*x732);
evalcond[2]=(gconst8+((new_r11*x733)));
evalcond[3]=(((gconst8*x733))+new_r11);
evalcond[4]=((((-1.0)*x732*x734))+new_r10);
evalcond[5]=((((-1.0)*x733*x734))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x732))+((new_r10*x733)));
evalcond[7]=(((new_r00*x733))+(((-1.0)*x734))+((new_r10*x732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x735=((1.0)*new_r11);
CheckValue<IkReal> x736=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x735))+((gconst7*new_r01)))),-1);
if(!x736.valid){
continue;
}
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal((((gconst7*gconst8))+(((-1.0)*new_r01*x735)))),IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x736.value)))+(x737.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x738=IKcos(j15);
IkReal x739=IKsin(j15);
IkReal x740=((1.0)*gconst8);
IkReal x741=(gconst7*x738);
IkReal x742=(gconst7*x739);
IkReal x743=((1.0)*x739);
IkReal x744=(x739*x740);
evalcond[0]=(gconst7+((new_r01*x738))+((new_r11*x739)));
evalcond[1]=(((gconst8*x738))+x742+new_r11);
evalcond[2]=((((-1.0)*new_r00*x743))+gconst7+((new_r10*x738)));
evalcond[3]=((((-1.0)*new_r01*x743))+gconst8+((new_r11*x738)));
evalcond[4]=(x741+new_r10+(((-1.0)*x744)));
evalcond[5]=(x741+new_r01+(((-1.0)*x744)));
evalcond[6]=(((new_r00*x738))+(((-1.0)*x740))+((new_r10*x739)));
evalcond[7]=((((-1.0)*x738*x740))+(((-1.0)*x742))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x745=((1.0)*new_r11);
CheckValue<IkReal> x746=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x746.valid){
continue;
}
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal(((((-1.0)*gconst7*x745))+((gconst8*new_r01)))),IkReal(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*x745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x746.value)))+(x747.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x748=IKcos(j15);
IkReal x749=IKsin(j15);
IkReal x750=((1.0)*gconst8);
IkReal x751=(gconst7*x748);
IkReal x752=(gconst7*x749);
IkReal x753=((1.0)*x749);
IkReal x754=(x749*x750);
evalcond[0]=(gconst7+((new_r01*x748))+((new_r11*x749)));
evalcond[1]=(((gconst8*x748))+x752+new_r11);
evalcond[2]=(gconst7+(((-1.0)*new_r00*x753))+((new_r10*x748)));
evalcond[3]=((((-1.0)*new_r01*x753))+gconst8+((new_r11*x748)));
evalcond[4]=(x751+new_r10+(((-1.0)*x754)));
evalcond[5]=(x751+new_r01+(((-1.0)*x754)));
evalcond[6]=(((new_r10*x749))+((new_r00*x748))+(((-1.0)*x750)));
evalcond[7]=((((-1.0)*x752))+new_r00+(((-1.0)*x748*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x755=((1.0)*gconst7);
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x755))+((gconst7*new_r01)))),IkReal(((((-1.0)*new_r00*x755))+(((-1.0)*new_r11*x755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x757.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x756.value)+(((1.5707963267949)*(x757.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x758=IKcos(j15);
IkReal x759=IKsin(j15);
IkReal x760=((1.0)*gconst8);
IkReal x761=(gconst7*x758);
IkReal x762=(gconst7*x759);
IkReal x763=((1.0)*x759);
IkReal x764=(x759*x760);
evalcond[0]=(gconst7+((new_r11*x759))+((new_r01*x758)));
evalcond[1]=(((gconst8*x758))+x762+new_r11);
evalcond[2]=((((-1.0)*new_r00*x763))+gconst7+((new_r10*x758)));
evalcond[3]=(gconst8+((new_r11*x758))+(((-1.0)*new_r01*x763)));
evalcond[4]=((((-1.0)*x764))+x761+new_r10);
evalcond[5]=((((-1.0)*x764))+x761+new_r01);
evalcond[6]=((((-1.0)*x760))+((new_r00*x758))+((new_r10*x759)));
evalcond[7]=((((-1.0)*x758*x760))+(((-1.0)*x762))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x766 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x766)==0){
continue;
}
IkReal x765=pow(x766,-0.5);
CheckValue<IkReal> x767 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x767.valid){
continue;
}
IkReal gconst10=((1.0)*new_r01*x765);
IkReal gconst11=((-1.0)*new_r11*x765);
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x768.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
IkReal x769=((1.0)*(x771.value));
IkReal x770=x765;
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x769)));
IkReal gconst10=((1.0)*new_r01*x770);
IkReal gconst11=((-1.0)*new_r11*x770);
IkReal x772=new_r01*new_r01;
IkReal x773=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x774=x765;
IkReal x775=((1.0)*new_r01*x774);
j15eval[0]=x773;
j15eval[1]=((IKabs(((((-1.0)*new_r00*x775))+(((-1.0)*new_r11*x775)))))+(IKabs((((x772*x774))+(((-1.0)*new_r10*x775))))));
j15eval[2]=IKsign(x773);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
CheckValue<IkReal> x778 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x778.valid){
continue;
}
IkReal x776=((1.0)*(x778.value));
IkReal x777=x765;
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x776)));
IkReal gconst10=((1.0)*new_r01*x777);
IkReal gconst11=((-1.0)*new_r11*x777);
IkReal x779=((new_r01*new_r01)+(new_r11*new_r11));
j15eval[0]=x779;
j15eval[1]=IKsign(x779);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x782 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x782.valid){
continue;
}
IkReal x780=((1.0)*(x782.value));
IkReal x781=x765;
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x780)));
IkReal gconst10=((1.0)*new_r01*x781);
IkReal gconst11=((-1.0)*new_r11*x781);
IkReal x783=new_r01*new_r01;
IkReal x784=new_r11*new_r11;
IkReal x785=((1.0)*x783);
CheckValue<IkReal> x791=IKPowWithIntegerCheck((x783+x784),-1);
if(!x791.valid){
continue;
}
IkReal x786=x791.value;
CheckValue<IkReal> x792=IKPowWithIntegerCheck(((((-1.0)*x785))+(((-1.0)*x784))),-1);
if(!x792.valid){
continue;
}
IkReal x787=x792.value;
IkReal x788=((1.0)*x787);
IkReal x789=(new_r11*x788);
j15eval[0]=((IKabs((((x786*(x784*x784)))+((x783*x784*x786))+(((-1.0)*x785*x786)))))+(IKabs(((((-1.0)*x789*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x789))+(((-1.0)*new_r01*x789*(new_r11*new_r11)))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
IkReal x793=((1.0)*(x794.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x793)));
new_r11=0;
new_r00=0;
IkReal x795 = new_r01*new_r01;
if(IKabs(x795)==0){
continue;
}
IkReal gconst10=((1.0)*new_r01*(pow(x795,-0.5)));
j15eval[0]=new_r10;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x796=IKPowWithIntegerCheck(gconst10,-1);
if(!x796.valid){
continue;
}
cj15array[0]=((-1.0)*new_r10*(x796.value));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x797=IKsin(j15);
IkReal x798=IKcos(j15);
IkReal x799=((-1.0)*x797);
evalcond[0]=(new_r10*x797);
evalcond[1]=(new_r01*x799);
evalcond[2]=(gconst10*x799);
evalcond[3]=(((new_r10*x798))+gconst10);
evalcond[4]=(gconst10+((new_r01*x798)));
evalcond[5]=(((gconst10*x798))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x800=IKPowWithIntegerCheck(new_r10,-1);
if(!x800.valid){
continue;
}
cj15array[0]=((-1.0)*gconst10*(x800.value));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x801=IKsin(j15);
IkReal x802=IKcos(j15);
IkReal x803=(gconst10*x802);
IkReal x804=((-1.0)*x801);
evalcond[0]=(new_r10*x801);
evalcond[1]=(new_r01*x804);
evalcond[2]=(gconst10*x804);
evalcond[3]=(new_r10+x803);
evalcond[4]=(gconst10+((new_r01*x802)));
evalcond[5]=(new_r01+x803);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
CheckValue<IkReal> x806 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x806.valid){
continue;
}
IkReal x805=((1.0)*(x806.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x805)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j15eval[0]=1.0;
j15eval[1]=1.0;
j15eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
IkReal x807=((1.0)*(x808.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x807)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j15eval[0]=-1.0;
j15eval[1]=-1.0;
j15eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
IkReal x809=((1.0)*(x810.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x809)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j15eval[0]=1.0;
j15eval[1]=1.0;
j15eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x811=((1.0)*new_r11);
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x811)))),IkReal(((((-1.0)*gconst11*x811))+(((-1.0)*gconst10*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x813.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x812.value)+(((1.5707963267949)*(x813.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x814=IKcos(j15);
IkReal x815=IKsin(j15);
IkReal x816=(gconst10*x814);
IkReal x817=(gconst11*x814);
IkReal x818=((1.0)*x815);
IkReal x819=(gconst11*x818);
evalcond[0]=((((-1.0)*x819))+x816);
evalcond[1]=(((new_r11*x815))+((new_r01*x814))+gconst10);
evalcond[2]=(((gconst10*x815))+new_r11+x817);
evalcond[3]=(((new_r11*x814))+gconst11+(((-1.0)*new_r01*x818)));
evalcond[4]=((((-1.0)*gconst10*x818))+(((-1.0)*x817)));
evalcond[5]=((((-1.0)*x819))+new_r01+x816);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x820=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst11*gconst11)))+(((-1.0)*(gconst10*gconst10))))),-1);
if(!x820.valid){
continue;
}
CheckValue<IkReal> x821 = IKatan2WithCheck(IkReal((gconst10*new_r11)),IkReal((gconst11*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x821.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x820.value)))+(x821.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x822=IKcos(j15);
IkReal x823=IKsin(j15);
IkReal x824=(gconst10*x822);
IkReal x825=(gconst11*x822);
IkReal x826=((1.0)*x823);
IkReal x827=(gconst11*x826);
evalcond[0]=((((-1.0)*x827))+x824);
evalcond[1]=(((new_r01*x822))+gconst10+((new_r11*x823)));
evalcond[2]=(((gconst10*x823))+new_r11+x825);
evalcond[3]=(gconst11+((new_r11*x822))+(((-1.0)*new_r01*x826)));
evalcond[4]=((((-1.0)*gconst10*x826))+(((-1.0)*x825)));
evalcond[5]=((((-1.0)*x827))+new_r01+x824);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x828=IKPowWithIntegerCheck(IKsign((((gconst10*new_r01))+(((-1.0)*gconst11*new_r11)))),-1);
if(!x828.valid){
continue;
}
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal((gconst10*gconst11)),IkReal(gconst11*gconst11),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x828.value)))+(x829.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x830=IKcos(j15);
IkReal x831=IKsin(j15);
IkReal x832=(gconst10*x830);
IkReal x833=(gconst11*x830);
IkReal x834=((1.0)*x831);
IkReal x835=(gconst11*x834);
evalcond[0]=((((-1.0)*x835))+x832);
evalcond[1]=(((new_r11*x831))+((new_r01*x830))+gconst10);
evalcond[2]=(((gconst10*x831))+new_r11+x833);
evalcond[3]=(((new_r11*x830))+gconst11+(((-1.0)*new_r01*x834)));
evalcond[4]=((((-1.0)*gconst10*x834))+(((-1.0)*x833)));
evalcond[5]=((((-1.0)*x835))+new_r01+x832);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x836=IKPowWithIntegerCheck(gconst11,-1);
if(!x836.valid){
continue;
}
cj15array[0]=(new_r00*(x836.value));
if( cj15array[0] >= -1-IKFAST_SINCOS_THRESH && cj15array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j15valid[0] = j15valid[1] = true;
    j15array[0] = IKacos(cj15array[0]);
    sj15array[0] = IKsin(j15array[0]);
    cj15array[1] = cj15array[0];
    j15array[1] = -j15array[0];
    sj15array[1] = -sj15array[0];
}
else if( isnan(cj15array[0]) )
{
    // probably any value will work
    j15valid[0] = true;
    cj15array[0] = 1; sj15array[0] = 0; j15array[0] = 0;
}
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[6];
IkReal x837=IKsin(j15);
IkReal x838=IKcos(j15);
IkReal x839=((-1.0)*x837);
evalcond[0]=(new_r11*x837);
evalcond[1]=(new_r00*x839);
evalcond[2]=(gconst11*x839);
evalcond[3]=(((new_r11*x838))+gconst11);
evalcond[4]=(((gconst11*x838))+new_r11);
evalcond[5]=(((new_r00*x838))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
IkReal x840=((1.0)*(x841.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x840)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst10=0;
IkReal x842 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x842)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x842,-0.5)));
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
IkReal x843=((1.0)*(x844.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x843)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst10=0;
IkReal x845 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x845)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x845,-0.5)));
j15eval[0]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
IkReal x846=((1.0)*(x847.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x846)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal x848 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x848)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x848,-0.5)));
j15eval[0]=new_r10;
j15eval[1]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x849=IKPowWithIntegerCheck(new_r10,-1);
if(!x849.valid){
continue;
}
CheckValue<IkReal> x850=IKPowWithIntegerCheck(new_r11,-1);
if(!x850.valid){
continue;
}
if( IKabs((gconst11*(x849.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x850.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst11*(x849.value)))+IKsqr(((-1.0)*gconst11*(x850.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((gconst11*(x849.value)), ((-1.0)*gconst11*(x850.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x851=IKcos(j15);
IkReal x852=IKsin(j15);
IkReal x853=((1.0)*gconst11);
IkReal x854=(gconst11*x851);
evalcond[0]=(new_r10*x851);
evalcond[1]=(new_r11*x852);
evalcond[2]=((-1.0)*x854);
evalcond[3]=((-1.0)*gconst11*x852);
evalcond[4]=(gconst11+((new_r11*x851)));
evalcond[5]=(new_r11+x854);
evalcond[6]=((((-1.0)*x852*x853))+new_r10);
evalcond[7]=((((-1.0)*x853))+((new_r10*x852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x855=IKPowWithIntegerCheck(gconst11,-1);
if(!x855.valid){
continue;
}
CheckValue<IkReal> x856=IKPowWithIntegerCheck(new_r11,-1);
if(!x856.valid){
continue;
}
if( IKabs((new_r10*(x855.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x856.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x855.value)))+IKsqr(((-1.0)*gconst11*(x856.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((new_r10*(x855.value)), ((-1.0)*gconst11*(x856.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x857=IKcos(j15);
IkReal x858=IKsin(j15);
IkReal x859=((1.0)*gconst11);
IkReal x860=(gconst11*x857);
evalcond[0]=(new_r10*x857);
evalcond[1]=(new_r11*x858);
evalcond[2]=((-1.0)*x860);
evalcond[3]=((-1.0)*gconst11*x858);
evalcond[4]=(gconst11+((new_r11*x857)));
evalcond[5]=(new_r11+x860);
evalcond[6]=((((-1.0)*x858*x859))+new_r10);
evalcond[7]=((((-1.0)*x859))+((new_r10*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x861=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x861.valid){
continue;
}
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x861.value)))+(x862.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x863=IKcos(j15);
IkReal x864=IKsin(j15);
IkReal x865=((1.0)*gconst11);
IkReal x866=(gconst11*x863);
evalcond[0]=(new_r10*x863);
evalcond[1]=(new_r11*x864);
evalcond[2]=((-1.0)*x866);
evalcond[3]=((-1.0)*gconst11*x864);
evalcond[4]=(gconst11+((new_r11*x863)));
evalcond[5]=(new_r11+x866);
evalcond[6]=((((-1.0)*x864*x865))+new_r10);
evalcond[7]=((((-1.0)*x865))+((new_r10*x864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
CheckValue<IkReal> x868 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x868.valid){
continue;
}
IkReal x867=((1.0)*(x868.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x867)));
new_r01=0;
IkReal gconst10=0;
IkReal x869 = new_r11*new_r11;
if(IKabs(x869)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x869,-0.5)));
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
IkReal x870=((1.0)*(x871.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x870)));
new_r01=0;
IkReal gconst10=0;
IkReal x872 = new_r11*new_r11;
if(IKabs(x872)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x872,-0.5)));
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
CheckValue<IkReal> x874 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x874.valid){
continue;
}
IkReal x873=((1.0)*(x874.value));
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x873)));
new_r01=0;
IkReal x875 = new_r11*new_r11;
if(IKabs(x875)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x875,-0.5)));
j15eval[0]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x876=IKPowWithIntegerCheck(gconst11,-1);
if(!x876.valid){
continue;
}
CheckValue<IkReal> x877=IKPowWithIntegerCheck(new_r11,-1);
if(!x877.valid){
continue;
}
if( IKabs((new_r10*(x876.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x877.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x876.value)))+IKsqr(((-1.0)*gconst11*(x877.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((new_r10*(x876.value)), ((-1.0)*gconst11*(x877.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x878=IKsin(j15);
IkReal x879=IKcos(j15);
IkReal x880=((1.0)*gconst11);
IkReal x881=(gconst11*x879);
evalcond[0]=(new_r11*x878);
evalcond[1]=((-1.0)*gconst11*x878);
evalcond[2]=(gconst11+((new_r11*x879)));
evalcond[3]=(new_r11+x881);
evalcond[4]=(new_r10+(((-1.0)*x878*x880)));
evalcond[5]=((((-1.0)*x879*x880))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x878))+((new_r10*x879)));
evalcond[7]=(((new_r00*x879))+(((-1.0)*x880))+((new_r10*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x882=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x882.valid){
continue;
}
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x882.value)))+(x883.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x884=IKsin(j15);
IkReal x885=IKcos(j15);
IkReal x886=((1.0)*gconst11);
IkReal x887=(gconst11*x885);
evalcond[0]=(new_r11*x884);
evalcond[1]=((-1.0)*gconst11*x884);
evalcond[2]=(((new_r11*x885))+gconst11);
evalcond[3]=(new_r11+x887);
evalcond[4]=(new_r10+(((-1.0)*x884*x886)));
evalcond[5]=(new_r00+(((-1.0)*x885*x886)));
evalcond[6]=((((-1.0)*new_r00*x884))+((new_r10*x885)));
evalcond[7]=(((new_r10*x884))+((new_r00*x885))+(((-1.0)*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x888=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x888.valid){
continue;
}
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x888.value)))+(x889.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x890=IKsin(j15);
IkReal x891=IKcos(j15);
IkReal x892=((1.0)*gconst11);
IkReal x893=(gconst11*x891);
evalcond[0]=(new_r11*x890);
evalcond[1]=((-1.0)*gconst11*x890);
evalcond[2]=(((new_r11*x891))+gconst11);
evalcond[3]=(new_r11+x893);
evalcond[4]=(new_r10+(((-1.0)*x890*x892)));
evalcond[5]=(new_r00+(((-1.0)*x891*x892)));
evalcond[6]=((((-1.0)*new_r00*x890))+((new_r10*x891)));
evalcond[7]=(((new_r00*x891))+((new_r10*x890))+(((-1.0)*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x894=((1.0)*new_r11);
CheckValue<IkReal> x895 = IKatan2WithCheck(IkReal((((gconst10*gconst11))+(((-1.0)*new_r01*x894)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst10*gconst10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x895.valid){
continue;
}
CheckValue<IkReal> x896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*x894))+((gconst10*new_r01)))),-1);
if(!x896.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x895.value)+(((1.5707963267949)*(x896.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x897=IKcos(j15);
IkReal x898=IKsin(j15);
IkReal x899=((1.0)*gconst11);
IkReal x900=(gconst10*x897);
IkReal x901=(gconst11*x897);
IkReal x902=(gconst10*x898);
IkReal x903=((1.0)*x898);
IkReal x904=(x898*x899);
evalcond[0]=(((new_r11*x898))+((new_r01*x897))+gconst10);
evalcond[1]=(new_r11+x901+x902);
evalcond[2]=(((new_r10*x897))+gconst10+(((-1.0)*new_r00*x903)));
evalcond[3]=(((new_r11*x897))+gconst11+(((-1.0)*new_r01*x903)));
evalcond[4]=((((-1.0)*x904))+new_r10+x900);
evalcond[5]=((((-1.0)*x904))+new_r01+x900);
evalcond[6]=(((new_r00*x897))+((new_r10*x898))+(((-1.0)*x899)));
evalcond[7]=((((-1.0)*x902))+(((-1.0)*x897*x899))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x905=((1.0)*new_r11);
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x905)))),IkReal(((((-1.0)*gconst11*x905))+(((-1.0)*gconst10*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
CheckValue<IkReal> x907=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x907.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x906.value)+(((1.5707963267949)*(x907.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x908=IKcos(j15);
IkReal x909=IKsin(j15);
IkReal x910=((1.0)*gconst11);
IkReal x911=(gconst10*x908);
IkReal x912=(gconst11*x908);
IkReal x913=(gconst10*x909);
IkReal x914=((1.0)*x909);
IkReal x915=(x909*x910);
evalcond[0]=(gconst10+((new_r11*x909))+((new_r01*x908)));
evalcond[1]=(new_r11+x913+x912);
evalcond[2]=(gconst10+((new_r10*x908))+(((-1.0)*new_r00*x914)));
evalcond[3]=(gconst11+((new_r11*x908))+(((-1.0)*new_r01*x914)));
evalcond[4]=((((-1.0)*x915))+new_r10+x911);
evalcond[5]=((((-1.0)*x915))+new_r01+x911);
evalcond[6]=((((-1.0)*x910))+((new_r10*x909))+((new_r00*x908)));
evalcond[7]=((((-1.0)*x908*x910))+(((-1.0)*x913))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x916=((1.0)*gconst10);
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal((((gconst10*new_r01))+(((-1.0)*new_r10*x916)))),IkReal(((((-1.0)*new_r11*x916))+(((-1.0)*new_r00*x916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
CheckValue<IkReal> x918=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x918.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x917.value)+(((1.5707963267949)*(x918.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x919=IKcos(j15);
IkReal x920=IKsin(j15);
IkReal x921=((1.0)*gconst11);
IkReal x922=(gconst10*x919);
IkReal x923=(gconst11*x919);
IkReal x924=(gconst10*x920);
IkReal x925=((1.0)*x920);
IkReal x926=(x920*x921);
evalcond[0]=(gconst10+((new_r01*x919))+((new_r11*x920)));
evalcond[1]=(new_r11+x924+x923);
evalcond[2]=(gconst10+((new_r10*x919))+(((-1.0)*new_r00*x925)));
evalcond[3]=(gconst11+((new_r11*x919))+(((-1.0)*new_r01*x925)));
evalcond[4]=((((-1.0)*x926))+new_r10+x922);
evalcond[5]=((((-1.0)*x926))+new_r01+x922);
evalcond[6]=((((-1.0)*x921))+((new_r00*x919))+((new_r10*x920)));
evalcond[7]=((((-1.0)*x924))+(((-1.0)*x919*x921))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r01=0;
new_r11=0;
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
IkReal x927=x928.value;
j15array[0]=((-1.0)*x927);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x927)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j15))))+(((-1.0)*new_r00*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j17))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(new_r10, ((-1.0)*new_r11));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x929=IKcos(j15);
IkReal x930=IKsin(j15);
IkReal x931=((1.0)*x930);
evalcond[0]=(new_r11+x929);
evalcond[1]=(new_r10+(((-1.0)*x931)));
evalcond[2]=((((-1.0)*x929))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x931)));
evalcond[4]=(((new_r01*x929))+((new_r11*x930)));
evalcond[5]=((((-1.0)*new_r00*x931))+((new_r10*x929)));
evalcond[6]=((-1.0)+((new_r00*x929))+((new_r10*x930)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x931))+((new_r11*x929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x932=IKsin(j15);
IkReal x933=IKcos(j15);
IkReal x934=((1.0)*x932);
evalcond[0]=(new_r10+x932);
evalcond[1]=(new_r00+x933);
evalcond[2]=(new_r01+x932);
evalcond[3]=((((-1.0)*x933))+new_r11);
evalcond[4]=(((new_r01*x933))+((new_r11*x932)));
evalcond[5]=((((-1.0)*new_r00*x934))+((new_r10*x933)));
evalcond[6]=((1.0)+((new_r00*x933))+((new_r10*x932)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x934))+((new_r11*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r11=0;
new_r00=0;
j15eval[0]=new_r01;
j15eval[1]=IKsign(new_r01);
j15eval[2]=((IKabs(sj17))+(IKabs(cj17)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r11=0;
new_r00=0;
j15eval[0]=new_r10;
j15eval[1]=((IKabs(sj17))+(IKabs(cj17)));
j15eval[2]=IKsign(new_r10);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r11=0;
new_r00=0;
j15eval[0]=new_r01;
j15eval[1]=new_r10;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(new_r01,-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(new_r10,-1);
if(!x936.valid){
continue;
}
if( IKabs((cj17*(x935.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj17*(x936.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj17*(x935.value)))+IKsqr(((-1.0)*sj17*(x936.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((cj17*(x935.value)), ((-1.0)*sj17*(x936.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[7];
IkReal x937=IKcos(j15);
IkReal x938=IKsin(j15);
IkReal x939=((1.0)*cj17);
IkReal x940=(sj17*x937);
IkReal x941=((1.0)*x938);
IkReal x942=(x938*x939);
evalcond[0]=(sj17+((new_r10*x937)));
evalcond[1]=(((new_r01*x937))+sj17);
evalcond[2]=(cj17+(((-1.0)*new_r01*x941)));
evalcond[3]=(((new_r10*x938))+(((-1.0)*x939)));
evalcond[4]=((((-1.0)*x942))+new_r10+x940);
evalcond[5]=((((-1.0)*x937*x939))+(((-1.0)*sj17*x941)));
evalcond[6]=((((-1.0)*x942))+new_r01+x940);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x943=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x943.valid){
continue;
}
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(cj17),IkReal(((-1.0)*sj17)),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x943.value)))+(x944.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[7];
IkReal x945=IKcos(j15);
IkReal x946=IKsin(j15);
IkReal x947=((1.0)*cj17);
IkReal x948=(sj17*x945);
IkReal x949=((1.0)*x946);
IkReal x950=(x946*x947);
evalcond[0]=(sj17+((new_r10*x945)));
evalcond[1]=(((new_r01*x945))+sj17);
evalcond[2]=(cj17+(((-1.0)*new_r01*x949)));
evalcond[3]=((((-1.0)*x947))+((new_r10*x946)));
evalcond[4]=(new_r10+(((-1.0)*x950))+x948);
evalcond[5]=((((-1.0)*x945*x947))+(((-1.0)*sj17*x949)));
evalcond[6]=(new_r01+(((-1.0)*x950))+x948);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x951=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952 = IKatan2WithCheck(IkReal(cj17),IkReal(((-1.0)*sj17)),IKFAST_ATAN2_MAGTHRESH);
if(!x952.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x951.value)))+(x952.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[7];
IkReal x953=IKcos(j15);
IkReal x954=IKsin(j15);
IkReal x955=((1.0)*cj17);
IkReal x956=(sj17*x953);
IkReal x957=((1.0)*x954);
IkReal x958=(x954*x955);
evalcond[0]=(((new_r10*x953))+sj17);
evalcond[1]=(((new_r01*x953))+sj17);
evalcond[2]=(cj17+(((-1.0)*new_r01*x957)));
evalcond[3]=(((new_r10*x954))+(((-1.0)*x955)));
evalcond[4]=(new_r10+(((-1.0)*x958))+x956);
evalcond[5]=((((-1.0)*x953*x955))+(((-1.0)*sj17*x957)));
evalcond[6]=(new_r01+(((-1.0)*x958))+x956);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
IkReal x959=x960.value;
j15array[0]=((-1.0)*x959);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x959)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j15))))+(((-1.0)*new_r00*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x962 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x962.valid){
continue;
}
IkReal x961=x962.value;
j15array[0]=((-1.0)*x961);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x961)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j15))))+((new_r11*(IKcos(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r01=0;
new_r10=0;
j15eval[0]=new_r11;
j15eval[1]=IKsign(new_r11);
j15eval[2]=((IKabs(sj17))+(IKabs(cj17)));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
sj16=0;
cj16=-1.0;
j16=3.14159265358979;
new_r01=0;
new_r10=0;
j15eval[0]=new_r00;
j15eval[1]=new_r11;
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x963=IKPowWithIntegerCheck(new_r00,-1);
if(!x963.valid){
continue;
}
CheckValue<IkReal> x964=IKPowWithIntegerCheck(new_r11,-1);
if(!x964.valid){
continue;
}
if( IKabs((sj17*(x963.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj17*(x964.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj17*(x963.value)))+IKsqr(((-1.0)*cj17*(x964.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((sj17*(x963.value)), ((-1.0)*cj17*(x964.value)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[7];
IkReal x965=IKsin(j15);
IkReal x966=IKcos(j15);
IkReal x967=((1.0)*cj17);
IkReal x968=((1.0)*x965);
evalcond[0]=(((new_r11*x966))+cj17);
evalcond[1]=(((new_r11*x965))+sj17);
evalcond[2]=((((-1.0)*new_r00*x968))+sj17);
evalcond[3]=(((new_r00*x966))+(((-1.0)*x967)));
evalcond[4]=(((sj17*x966))+(((-1.0)*x965*x967)));
evalcond[5]=(((sj17*x965))+((cj17*x966))+new_r11);
evalcond[6]=((((-1.0)*x966*x967))+new_r00+(((-1.0)*sj17*x968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x969=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal(((-1.0)*sj17)),IkReal(((-1.0)*cj17)),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x969.value)))+(x970.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[7];
IkReal x971=IKsin(j15);
IkReal x972=IKcos(j15);
IkReal x973=((1.0)*cj17);
IkReal x974=((1.0)*x971);
evalcond[0]=(cj17+((new_r11*x972)));
evalcond[1]=(sj17+((new_r11*x971)));
evalcond[2]=(sj17+(((-1.0)*new_r00*x974)));
evalcond[3]=((((-1.0)*x973))+((new_r00*x972)));
evalcond[4]=((((-1.0)*x971*x973))+((sj17*x972)));
evalcond[5]=(((cj17*x972))+new_r11+((sj17*x971)));
evalcond[6]=((((-1.0)*sj17*x974))+(((-1.0)*x972*x973))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x975=IKPowWithIntegerCheck(IKsign((((new_r11*sj17))+((cj17*new_r01)))),-1);
if(!x975.valid){
continue;
}
CheckValue<IkReal> x976 = IKatan2WithCheck(IkReal(((-1.0)+((new_r01*new_r10))+(cj17*cj17))),IkReal(((((-1.0)*cj17*sj17))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x976.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x975.value)))+(x976.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x977=IKsin(j15);
IkReal x978=IKcos(j15);
IkReal x979=((1.0)*cj17);
IkReal x980=(sj17*x978);
IkReal x981=((1.0)*x977);
IkReal x982=(x977*x979);
evalcond[0]=(((new_r01*x978))+sj17+((new_r11*x977)));
evalcond[1]=(((cj17*x978))+new_r11+((sj17*x977)));
evalcond[2]=((((-1.0)*new_r00*x981))+sj17+((new_r10*x978)));
evalcond[3]=((((-1.0)*new_r01*x981))+cj17+((new_r11*x978)));
evalcond[4]=((((-1.0)*x982))+new_r10+x980);
evalcond[5]=((((-1.0)*x982))+new_r01+x980);
evalcond[6]=(((new_r10*x977))+(((-1.0)*x979))+((new_r00*x978)));
evalcond[7]=((((-1.0)*x978*x979))+new_r00+(((-1.0)*sj17*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x983=((1.0)*new_r11);
CheckValue<IkReal> x984 = IKatan2WithCheck(IkReal((((cj17*new_r01))+(((-1.0)*sj17*x983)))),IkReal(((((-1.0)*cj17*x983))+(((-1.0)*new_r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
CheckValue<IkReal> x985=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x985.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x984.value)+(((1.5707963267949)*(x985.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x986=IKsin(j15);
IkReal x987=IKcos(j15);
IkReal x988=((1.0)*cj17);
IkReal x989=(sj17*x987);
IkReal x990=((1.0)*x986);
IkReal x991=(x986*x988);
evalcond[0]=(sj17+((new_r11*x986))+((new_r01*x987)));
evalcond[1]=(((sj17*x986))+((cj17*x987))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x990))+sj17+((new_r10*x987)));
evalcond[3]=((((-1.0)*new_r01*x990))+cj17+((new_r11*x987)));
evalcond[4]=((((-1.0)*x991))+new_r10+x989);
evalcond[5]=((((-1.0)*x991))+new_r01+x989);
evalcond[6]=(((new_r00*x987))+(((-1.0)*x988))+((new_r10*x986)));
evalcond[7]=((((-1.0)*sj17*x990))+(((-1.0)*x987*x988))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x992=((1.0)*sj17);
CheckValue<IkReal> x993 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x992))+((new_r01*sj17)))),IkReal(((((-1.0)*new_r11*x992))+(((-1.0)*new_r00*x992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x994.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x993.value)+(((1.5707963267949)*(x994.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[8];
IkReal x995=IKsin(j15);
IkReal x996=IKcos(j15);
IkReal x997=((1.0)*cj17);
IkReal x998=(sj17*x996);
IkReal x999=((1.0)*x995);
IkReal x1000=(x995*x997);
evalcond[0]=(((new_r11*x995))+sj17+((new_r01*x996)));
evalcond[1]=(((sj17*x995))+((cj17*x996))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x999))+((new_r10*x996))+sj17);
evalcond[3]=(((new_r11*x996))+(((-1.0)*new_r01*x999))+cj17);
evalcond[4]=((((-1.0)*x1000))+new_r10+x998);
evalcond[5]=((((-1.0)*x1000))+new_r01+x998);
evalcond[6]=(((new_r10*x995))+(((-1.0)*x997))+((new_r00*x996)));
evalcond[7]=((((-1.0)*sj17*x999))+(((-1.0)*x996*x997))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
{
IkReal j15eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j15eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j15]

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
IkReal x1001=((-1.0)*new_r22);
CheckValue<IkReal> x1003 = IKatan2WithCheck(IkReal((new_r01*x1001)),IkReal((new_r11*x1001)),IKFAST_ATAN2_MAGTHRESH);
if(!x1003.valid){
continue;
}
IkReal x1002=x1003.value;
j15array[0]=((-1.0)*x1002);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1002)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x1004=IKcos(j15);
IkReal x1005=IKsin(j15);
IkReal x1006=(new_r00*x1004);
IkReal x1007=((1.0)*x1005);
evalcond[0]=(x1006+((new_r10*x1005)));
evalcond[1]=(((new_r11*x1005))+((new_r01*x1004)));
evalcond[2]=(((new_r10*x1004))+(((-1.0)*new_r00*x1007)));
evalcond[3]=(((new_r11*x1004))+(((-1.0)*new_r01*x1007)));
evalcond[4]=((((-1.0)*new_r22*x1006))+(((-1.0)*new_r10*new_r22*x1007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
IkReal x1008=x1009.value;
j15array[0]=((-1.0)*x1008);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1008)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x1010=IKcos(j15);
IkReal x1011=IKsin(j15);
IkReal x1012=((1.0)*new_r01);
IkReal x1013=(new_r00*x1010);
IkReal x1014=((1.0)*x1011);
evalcond[0]=(x1013+((new_r10*x1011)));
evalcond[1]=(((new_r10*x1010))+(((-1.0)*new_r00*x1014)));
evalcond[2]=((((-1.0)*x1011*x1012))+((new_r11*x1010)));
evalcond[3]=((((-1.0)*new_r22*x1010*x1012))+(((-1.0)*new_r11*new_r22*x1014)));
evalcond[4]=((((-1.0)*new_r10*new_r22*x1014))+(((-1.0)*new_r22*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1016 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1016.valid){
continue;
}
IkReal x1015=x1016.value;
j15array[0]=((-1.0)*x1015);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1015)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[5];
IkReal x1017=IKcos(j15);
IkReal x1018=IKsin(j15);
IkReal x1019=((1.0)*new_r22);
IkReal x1020=(new_r01*x1017);
IkReal x1021=((1.0)*x1018);
IkReal x1022=(new_r11*x1018);
evalcond[0]=(x1020+x1022);
evalcond[1]=((((-1.0)*new_r00*x1021))+((new_r10*x1017)));
evalcond[2]=(((new_r11*x1017))+(((-1.0)*new_r01*x1021)));
evalcond[3]=((((-1.0)*x1019*x1022))+(((-1.0)*x1019*x1020)));
evalcond[4]=((((-1.0)*new_r00*x1017*x1019))+(((-1.0)*new_r10*x1018*x1019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x1024=IKPowWithIntegerCheck(sj16,-1);
if(!x1024.valid){
continue;
}
IkReal x1023=x1024.value;
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(new_r12,-1);
if(!x1025.valid){
continue;
}
if( IKabs((x1023*(x1025.value)*(((-1.0)+(new_r02*new_r02)+(cj16*cj16))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x1023)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1023*(x1025.value)*(((-1.0)+(new_r02*new_r02)+(cj16*cj16)))))+IKsqr(((-1.0)*new_r02*x1023))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j15array[0]=IKatan2((x1023*(x1025.value)*(((-1.0)+(new_r02*new_r02)+(cj16*cj16)))), ((-1.0)*new_r02*x1023));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x1026=IKcos(j15);
IkReal x1027=IKsin(j15);
IkReal x1028=((1.0)*cj16);
IkReal x1029=(cj16*cj17);
IkReal x1030=((1.0)*sj16);
IkReal x1031=(new_r02*x1026);
IkReal x1032=(new_r00*x1026);
IkReal x1033=(new_r12*x1027);
IkReal x1034=(sj17*x1026);
IkReal x1035=(sj16*x1026);
IkReal x1036=(sj17*x1027);
IkReal x1037=(new_r10*x1027);
IkReal x1038=((1.0)*x1027);
IkReal x1039=(new_r01*x1026);
IkReal x1040=(sj16*x1027);
IkReal x1041=(new_r11*x1027);
evalcond[0]=(x1035+new_r02);
evalcond[1]=(x1040+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1038))+((new_r12*x1026)));
evalcond[3]=(x1033+x1031+sj16);
evalcond[4]=(((new_r10*x1026))+sj17+(((-1.0)*new_r00*x1038)));
evalcond[5]=(((new_r11*x1026))+cj17+(((-1.0)*new_r01*x1038)));
evalcond[6]=(x1034+new_r10+((x1027*x1029)));
evalcond[7]=(x1032+x1037+x1029);
evalcond[8]=((((-1.0)*x1036))+((x1026*x1029))+new_r00);
evalcond[9]=((((-1.0)*x1028*x1036))+((cj17*x1026))+new_r11);
evalcond[10]=(x1041+x1039+(((-1.0)*sj17*x1028)));
evalcond[11]=((((-1.0)*x1028*x1034))+(((-1.0)*cj17*x1038))+new_r01);
evalcond[12]=(((sj16*x1032))+((sj16*x1037))+(((-1.0)*new_r20*x1028)));
evalcond[13]=(((new_r11*x1040))+(((-1.0)*new_r21*x1028))+((new_r01*x1035)));
evalcond[14]=((1.0)+(((-1.0)*new_r22*x1028))+((sj16*x1031))+((sj16*x1033)));
evalcond[15]=((((-1.0)*x1028*x1033))+(((-1.0)*x1028*x1031))+(((-1.0)*new_r22*x1030)));
evalcond[16]=((((-1.0)*x1028*x1039))+(((-1.0)*x1028*x1041))+sj17+(((-1.0)*new_r21*x1030)));
evalcond[17]=((((-1.0)*x1028*x1032))+(((-1.0)*x1028*x1037))+(((-1.0)*new_r20*x1030))+(((-1.0)*cj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(IKsign(sj16),-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1043.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1042.value)))+(x1043.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[18];
IkReal x1044=IKcos(j15);
IkReal x1045=IKsin(j15);
IkReal x1046=((1.0)*cj16);
IkReal x1047=(cj16*cj17);
IkReal x1048=((1.0)*sj16);
IkReal x1049=(new_r02*x1044);
IkReal x1050=(new_r00*x1044);
IkReal x1051=(new_r12*x1045);
IkReal x1052=(sj17*x1044);
IkReal x1053=(sj16*x1044);
IkReal x1054=(sj17*x1045);
IkReal x1055=(new_r10*x1045);
IkReal x1056=((1.0)*x1045);
IkReal x1057=(new_r01*x1044);
IkReal x1058=(sj16*x1045);
IkReal x1059=(new_r11*x1045);
evalcond[0]=(x1053+new_r02);
evalcond[1]=(x1058+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1056))+((new_r12*x1044)));
evalcond[3]=(x1051+x1049+sj16);
evalcond[4]=((((-1.0)*new_r00*x1056))+sj17+((new_r10*x1044)));
evalcond[5]=((((-1.0)*new_r01*x1056))+((new_r11*x1044))+cj17);
evalcond[6]=(x1052+new_r10+((x1045*x1047)));
evalcond[7]=(x1050+x1055+x1047);
evalcond[8]=((((-1.0)*x1054))+new_r00+((x1044*x1047)));
evalcond[9]=(((cj17*x1044))+(((-1.0)*x1046*x1054))+new_r11);
evalcond[10]=(x1057+x1059+(((-1.0)*sj17*x1046)));
evalcond[11]=((((-1.0)*x1046*x1052))+(((-1.0)*cj17*x1056))+new_r01);
evalcond[12]=((((-1.0)*new_r20*x1046))+((sj16*x1055))+((sj16*x1050)));
evalcond[13]=((((-1.0)*new_r21*x1046))+((new_r01*x1053))+((new_r11*x1058)));
evalcond[14]=((1.0)+((sj16*x1049))+(((-1.0)*new_r22*x1046))+((sj16*x1051)));
evalcond[15]=((((-1.0)*x1046*x1049))+(((-1.0)*new_r22*x1048))+(((-1.0)*x1046*x1051)));
evalcond[16]=((((-1.0)*x1046*x1057))+(((-1.0)*x1046*x1059))+(((-1.0)*new_r21*x1048))+sj17);
evalcond[17]=((((-1.0)*x1046*x1055))+(((-1.0)*x1046*x1050))+(((-1.0)*new_r20*x1048))+(((-1.0)*cj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(8);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j16;
vinfos[6].indices[0] = _ij16[0];
vinfos[6].indices[1] = _ij16[1];
vinfos[6].maxsolutions = _nj16;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j17;
vinfos[7].indices[0] = _ij17[0];
vinfos[7].indices[1] = _ij17[1];
vinfos[7].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return ""; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

// start python bindings
// https://github.com/caelan/ss-pybullet/blob/c5efe7ad32381a7a7a15c2bd147b5a8731d21342/pybullet_tools/ikfast/pr2/left_arm_ik.cpp#L12972
// https://github.com/yijiangh/conrob_pybullet/blob/master/utils/ikfast/kuka_kr6_r900/ikfast0x1000004a.Transform6D.0_1_2_3_4_5.cpp#L9923

static PyObject *get_ik(PyObject *self, PyObject *args)
{
    IkSolutionList<IkReal> solutions;

    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9], eetrans[3];

    // First list if 3x3 rotation matrix, easier to compute in Python.
    // Next list is [x, y, z] translation matrix.
    // Last list is free joints.
    PyObject *rotList; // 3x3 rotation matrix
    PyObject *transList; // [x,y,z]
    PyObject *freeList; // can be empty

    // format 'O!': pass C object pointer with the pointer's address.
    if(!PyArg_ParseTuple(args, "O!O!O!", &PyList_Type, &rotList, &PyList_Type, &transList, &PyList_Type, &freeList))
    {
        fprintf(stderr,"Failed to parse input to python objects\n");
        return NULL;
    }

    for(std::size_t i = 0; i < 3; ++i)
    {
        eetrans[i] = PyFloat_AsDouble(PyList_GetItem(transList, i));

        PyObject* rowList = PyList_GetItem(rotList, i);
        for( std::size_t j = 0; j < 3; ++j)
        {
            eerot[3*i + j] = PyFloat_AsDouble(PyList_GetItem(rowList, j));
        }
    }

    for(int i = 0; i < GetNumFreeParameters(); ++i)
    {
        vfree[i] = PyFloat_AsDouble(PyList_GetItem(freeList, i));
    }

    // call ikfast routine
    bool bSuccess = ComputeIk(eetrans, eerot, &vfree[0], solutions);

    if (!bSuccess)
    {
        //fprintf(stderr,"Failed to get ik solution\n");
        return Py_BuildValue(""); // Equivalent to returning None in python
    }

    std::vector<IkReal> solvalues(GetNumJoints());
    PyObject *solutionList = PyList_New(solutions.GetNumSolutions());

    // convert all ikfast solutions into a python list
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
    {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);

        PyObject *individualSolution = PyList_New(GetNumJoints());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
        {
            // I think IkReal is just a wrapper for double. So this should work.
            PyList_SetItem(individualSolution, j, PyFloat_FromDouble(solvalues[j]));
        }
        PyList_SetItem(solutionList, i, individualSolution);
    }

    return solutionList;
}

static PyObject *get_fk(PyObject *self, PyObject *args)
{
    std::vector<IkReal> joints(GetNumJoints());
    // eerot is a flattened 3x3 rotation matrix
    IkReal eerot[9], eetrans[3];

    PyObject *jointList;
    if(!PyArg_ParseTuple(args, "O!", &PyList_Type, &jointList))
    {
        return NULL;
    }

    for(std::size_t i = 0; i < GetNumJoints(); ++i)
    {
        joints[i] = PyFloat_AsDouble(PyList_GetItem(jointList, i));
    }

    // call ikfast routine
    ComputeFk(&joints[0], eetrans, eerot);

    // convert computed EE pose to a python object
    PyObject *pose = PyList_New(2);
    PyObject *pos = PyList_New(3);
    PyObject *rot = PyList_New(3);

    for(std::size_t i = 0; i < 3; ++i)
    {
        PyList_SetItem(pos, i, PyFloat_FromDouble(eetrans[i]));

        PyObject *row = PyList_New(3);
        for( std::size_t j = 0; j < 3; ++j)
        {
            PyList_SetItem(row, j, PyFloat_FromDouble(eerot[3*i + j]));
        }
        PyList_SetItem(rot, i, row);
    }

    PyList_SetItem(pose, 0, pos);
    PyList_SetItem(pose, 1, rot);

    return pose;
}

static PyMethodDef ikfast_methods[] =
{
    {"get_ik", get_ik, METH_VARARGS, "Compute ik solutions using ikfast."},
    {"get_fk", get_fk, METH_VARARGS, "Compute fk solutions using ikfast."},
    {NULL, NULL, 0, NULL}
    // Not sure why/if this is needed. It shows up in the examples though(something about Sentinel).
};

#if PY_MAJOR_VERSION >= 3

static struct PyModuleDef movo_right_arm_ik_module = {
    PyModuleDef_HEAD_INIT,
    "movo_right_arm_ik",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    ikfast_methods
};

#define INITERROR return NULL

PyMODINIT_FUNC
PyInit_movo_right_arm_ik(void)

#else // PY_MAJOR_VERSION < 3
#define INITERROR return

PyMODINIT_FUNC
initmovo_right_arm_ik(void)
#endif
{
#if PY_MAJOR_VERSION >= 3
    PyObject *module = PyModule_Create(&movo_right_arm_ik_module);
#else
    PyObject *module = Py_InitModule("movo_right_arm_ik", ikfast_methods);
#endif

if (module == NULL)
    INITERROR;

#if PY_MAJOR_VERSION >= 3
    return module;
#endif
}

// end python bindings